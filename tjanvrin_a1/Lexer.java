/* The following code was generated by JFlex 1.7.0 */

/*
  File Name: tiny.flex
  JFlex specification for the TINY language
  I got this code from the warmup package in the courselink.
  The original code was written by Dr. Fei Song, and was used with permission.
*/

import java.util.ArrayList;
   

/**
 * This class is a scanner generated by 
 * <a href="http://www.jflex.de/">JFlex</a> 1.7.0
 * from the specification file <tt>news.flex</tt>
 */
class Lexer {

  /** This character denotes the end of file */
  public static final int YYEOF = -1;

  /** initial size of the lookahead buffer */
  private static final int ZZ_BUFFERSIZE = 16384;

  /** lexical states */
  public static final int YYINITIAL = 0;

  /**
   * ZZ_LEXSTATE[l] is the state in the DFA for the lexical state l
   * ZZ_LEXSTATE[l+1] is the state in the DFA for the lexical state l
   *                  at the beginning of a line
   * l is of the form l = 2*k, k a non negative integer
   */
  private static final int ZZ_LEXSTATE[] = { 
     0, 0
  };

  /** 
   * Translates characters to character classes
   */
  private static final String ZZ_CMAP_PACKED = 
    "\11\0\1\1\1\1\1\26\1\1\1\1\22\0\1\1\6\0\1\23"+
    "\5\0\1\24\1\0\1\11\12\2\2\0\1\4\1\0\1\10\2\0"+
    "\1\6\1\3\1\14\1\12\1\15\1\3\1\7\1\20\1\22\2\3"+
    "\1\21\1\3\1\17\1\13\4\3\1\5\3\3\1\16\2\3\4\0"+
    "\1\25\1\0\32\3\12\0\1\26\32\0\1\25\11\0\1\25\12\0"+
    "\1\25\4\0\1\25\5\0\27\25\1\0\37\25\1\0\u01ca\25\4\0"+
    "\14\25\16\0\5\25\7\0\1\25\1\0\1\25\21\0\165\25\1\0"+
    "\2\25\2\0\4\25\1\0\1\25\6\0\1\25\1\0\3\25\1\0"+
    "\1\25\1\0\24\25\1\0\123\25\1\0\213\25\1\0\255\25\1\0"+
    "\46\25\2\0\1\25\7\0\47\25\11\0\55\25\1\0\1\25\1\0"+
    "\2\25\1\0\2\25\1\0\1\25\10\0\33\25\5\0\3\25\35\0"+
    "\13\25\5\0\112\25\4\0\146\25\1\0\10\25\2\0\12\25\1\0"+
    "\23\25\2\0\1\25\20\0\73\25\2\0\145\25\16\0\66\25\4\0"+
    "\1\25\5\0\56\25\22\0\34\25\104\0\25\25\1\0\10\25\26\0"+
    "\16\25\1\0\201\25\2\0\12\25\1\0\23\25\1\0\10\25\2\0"+
    "\2\25\2\0\26\25\1\0\7\25\1\0\1\25\3\0\4\25\2\0"+
    "\11\25\2\0\2\25\2\0\4\25\10\0\1\25\4\0\2\25\1\0"+
    "\5\25\2\0\14\25\17\0\3\25\1\0\6\25\4\0\2\25\2\0"+
    "\26\25\1\0\7\25\1\0\2\25\1\0\2\25\1\0\2\25\2\0"+
    "\1\25\1\0\5\25\4\0\2\25\2\0\3\25\3\0\1\25\7\0"+
    "\4\25\1\0\1\25\7\0\20\25\13\0\3\25\1\0\11\25\1\0"+
    "\3\25\1\0\26\25\1\0\7\25\1\0\2\25\1\0\5\25\2\0"+
    "\12\25\1\0\3\25\1\0\3\25\2\0\1\25\17\0\4\25\2\0"+
    "\12\25\11\0\1\25\7\0\3\25\1\0\10\25\2\0\2\25\2\0"+
    "\26\25\1\0\7\25\1\0\2\25\1\0\5\25\2\0\11\25\2\0"+
    "\2\25\2\0\3\25\10\0\2\25\4\0\2\25\1\0\5\25\2\0"+
    "\12\25\1\0\1\25\20\0\2\25\1\0\6\25\3\0\3\25\1\0"+
    "\4\25\3\0\2\25\1\0\1\25\1\0\2\25\3\0\2\25\3\0"+
    "\3\25\3\0\14\25\4\0\5\25\3\0\3\25\1\0\4\25\2\0"+
    "\1\25\6\0\1\25\16\0\12\25\20\0\4\25\1\0\10\25\1\0"+
    "\3\25\1\0\27\25\1\0\20\25\3\0\10\25\1\0\3\25\1\0"+
    "\4\25\7\0\2\25\1\0\3\25\5\0\4\25\2\0\12\25\20\0"+
    "\4\25\1\0\10\25\1\0\3\25\1\0\27\25\1\0\12\25\1\0"+
    "\5\25\2\0\11\25\1\0\3\25\1\0\4\25\7\0\2\25\7\0"+
    "\1\25\1\0\4\25\2\0\12\25\1\0\2\25\16\0\3\25\1\0"+
    "\10\25\1\0\3\25\1\0\51\25\2\0\10\25\1\0\3\25\1\0"+
    "\5\25\5\0\4\25\7\0\5\25\2\0\12\25\12\0\6\25\2\0"+
    "\2\25\1\0\22\25\3\0\30\25\1\0\11\25\1\0\1\25\2\0"+
    "\7\25\3\0\1\25\4\0\6\25\1\0\1\25\1\0\10\25\6\0"+
    "\12\25\2\0\2\25\15\0\72\25\5\0\17\25\1\0\12\25\47\0"+
    "\2\25\1\0\1\25\2\0\2\25\1\0\1\25\2\0\1\25\6\0"+
    "\4\25\1\0\7\25\1\0\3\25\1\0\1\25\1\0\1\25\2\0"+
    "\2\25\1\0\15\25\1\0\3\25\2\0\5\25\1\0\1\25\1\0"+
    "\6\25\2\0\12\25\2\0\4\25\40\0\1\25\27\0\2\25\6\0"+
    "\12\25\13\0\1\25\1\0\1\25\1\0\1\25\4\0\12\25\1\0"+
    "\44\25\4\0\24\25\1\0\22\25\1\0\44\25\11\0\1\25\71\0"+
    "\112\25\6\0\116\25\2\0\46\25\1\0\1\25\5\0\1\25\2\0"+
    "\53\25\1\0\u014d\25\1\0\4\25\2\0\7\25\1\0\1\25\1\0"+
    "\4\25\2\0\51\25\1\0\4\25\2\0\41\25\1\0\4\25\2\0"+
    "\7\25\1\0\1\25\1\0\4\25\2\0\17\25\1\0\71\25\1\0"+
    "\4\25\2\0\103\25\2\0\3\25\40\0\20\25\20\0\126\25\2\0"+
    "\6\25\3\0\u026c\25\2\0\54\25\5\0\113\25\3\0\13\25\7\0"+
    "\15\25\1\0\7\25\13\0\25\25\13\0\24\25\14\0\15\25\1\0"+
    "\3\25\1\0\2\25\14\0\124\25\3\0\1\25\4\0\2\25\2\0"+
    "\12\25\41\0\3\25\2\0\12\25\6\0\130\25\10\0\53\25\5\0"+
    "\106\25\12\0\37\25\1\0\14\25\4\0\14\25\12\0\50\25\2\0"+
    "\5\25\13\0\54\25\4\0\32\25\6\0\12\25\46\0\34\25\4\0"+
    "\77\25\1\0\35\25\2\0\13\25\6\0\12\25\15\0\1\25\10\0"+
    "\17\25\101\0\114\25\4\0\12\25\21\0\11\25\14\0\164\25\14\0"+
    "\70\25\10\0\12\25\3\0\61\25\2\0\11\25\107\0\3\25\1\0"+
    "\43\25\1\0\2\25\6\0\366\25\5\0\u011b\25\2\0\6\25\2\0"+
    "\46\25\2\0\6\25\2\0\10\25\1\0\1\25\1\0\1\25\1\0"+
    "\1\25\1\0\37\25\2\0\65\25\1\0\7\25\1\0\1\25\3\0"+
    "\3\25\1\0\7\25\3\0\4\25\2\0\6\25\4\0\15\25\5\0"+
    "\3\25\1\0\7\25\3\0\13\25\35\0\1\26\1\26\5\0\1\25"+
    "\17\0\2\25\23\0\1\25\12\0\1\25\21\0\1\25\15\0\1\25"+
    "\20\0\15\25\63\0\41\25\21\0\1\25\4\0\1\25\2\0\12\25"+
    "\1\0\1\25\3\0\5\25\6\0\1\25\1\0\1\25\1\0\1\25"+
    "\1\0\4\25\1\0\13\25\2\0\4\25\5\0\5\25\4\0\1\25"+
    "\21\0\51\25\u032d\0\64\25\u0716\0\57\25\1\0\57\25\1\0\205\25"+
    "\6\0\11\25\14\0\46\25\1\0\1\25\5\0\1\25\2\0\70\25"+
    "\7\0\1\25\17\0\30\25\11\0\7\25\1\0\7\25\1\0\7\25"+
    "\1\0\7\25\1\0\7\25\1\0\7\25\1\0\7\25\1\0\7\25"+
    "\1\0\40\25\57\0\1\25\u01d0\0\1\25\4\0\3\25\31\0\17\25"+
    "\1\0\5\25\2\0\5\25\4\0\126\25\2\0\2\25\2\0\3\25"+
    "\1\0\132\25\1\0\4\25\5\0\51\25\3\0\136\25\21\0\33\25"+
    "\65\0\20\25\u0200\0\u19b6\25\112\0\u51d6\25\52\0\u048d\25\103\0\56\25"+
    "\2\0\u010d\25\3\0\34\25\24\0\63\25\1\0\12\25\1\0\163\25"+
    "\45\0\11\25\2\0\147\25\2\0\44\25\1\0\10\25\77\0\61\25"+
    "\30\0\64\25\14\0\106\25\12\0\12\25\6\0\30\25\3\0\1\25"+
    "\1\0\1\25\2\0\56\25\2\0\44\25\14\0\35\25\3\0\101\25"+
    "\16\0\13\25\6\0\37\25\1\0\67\25\11\0\16\25\2\0\12\25"+
    "\6\0\27\25\3\0\111\25\30\0\3\25\2\0\20\25\2\0\5\25"+
    "\12\0\6\25\2\0\6\25\2\0\6\25\11\0\7\25\1\0\7\25"+
    "\1\0\53\25\1\0\12\25\12\0\173\25\1\0\2\25\2\0\12\25"+
    "\6\0\u2ba4\25\14\0\27\25\4\0\61\25\u2104\0\u016e\25\2\0\152\25"+
    "\46\0\7\25\14\0\5\25\5\0\14\25\1\0\15\25\1\0\5\25"+
    "\1\0\1\25\1\0\2\25\1\0\2\25\1\0\154\25\41\0\u016b\25"+
    "\22\0\100\25\2\0\66\25\50\0\14\25\4\0\20\25\20\0\20\25"+
    "\3\0\2\25\30\0\3\25\40\0\5\25\1\0\207\25\23\0\12\25"+
    "\7\0\32\25\4\0\1\25\1\0\32\25\13\0\131\25\3\0\6\25"+
    "\2\0\6\25\2\0\6\25\2\0\3\25\43\0\14\25\1\0\32\25"+
    "\1\0\23\25\1\0\2\25\1\0\17\25\2\0\16\25\42\0\173\25"+
    "\105\0\65\25\210\0\1\25\202\0\35\25\3\0\61\25\17\0\1\25"+
    "\37\0\40\25\20\0\33\25\5\0\53\25\5\0\36\25\2\0\44\25"+
    "\4\0\10\25\1\0\5\25\52\0\236\25\2\0\12\25\6\0\44\25"+
    "\4\0\44\25\4\0\50\25\10\0\64\25\234\0\u0137\25\11\0\26\25"+
    "\12\0\10\25\230\0\6\25\2\0\1\25\1\0\54\25\1\0\2\25"+
    "\3\0\1\25\2\0\27\25\12\0\27\25\11\0\37\25\101\0\23\25"+
    "\1\0\2\25\12\0\26\25\12\0\32\25\106\0\70\25\6\0\2\25"+
    "\100\0\4\25\1\0\2\25\5\0\10\25\1\0\3\25\1\0\33\25"+
    "\4\0\3\25\4\0\1\25\40\0\35\25\3\0\35\25\43\0\10\25"+
    "\1\0\36\25\31\0\66\25\12\0\26\25\12\0\23\25\15\0\22\25"+
    "\156\0\111\25\67\0\63\25\15\0\63\25\u030d\0\107\25\37\0\12\25"+
    "\17\0\74\25\25\0\31\25\7\0\12\25\6\0\65\25\1\0\12\25"+
    "\20\0\44\25\2\0\1\25\11\0\105\25\5\0\3\25\3\0\13\25"+
    "\1\0\1\25\43\0\22\25\1\0\45\25\6\0\1\25\101\0\7\25"+
    "\1\0\1\25\1\0\4\25\1\0\17\25\1\0\12\25\7\0\73\25"+
    "\5\0\12\25\6\0\4\25\1\0\10\25\2\0\2\25\2\0\26\25"+
    "\1\0\7\25\1\0\2\25\1\0\5\25\2\0\11\25\2\0\2\25"+
    "\2\0\3\25\2\0\1\25\6\0\1\25\5\0\7\25\2\0\7\25"+
    "\3\0\5\25\213\0\113\25\5\0\12\25\46\0\106\25\1\0\1\25"+
    "\10\0\12\25\246\0\66\25\2\0\11\25\27\0\6\25\42\0\101\25"+
    "\3\0\1\25\13\0\12\25\46\0\70\25\10\0\12\25\66\0\32\25"+
    "\3\0\17\25\4\0\12\25\u0166\0\112\25\25\0\1\25\u01c0\0\71\25"+
    "\u0107\0\11\25\1\0\55\25\1\0\11\25\17\0\12\25\30\0\36\25"+
    "\2\0\26\25\1\0\16\25\u0349\0\u039a\25\146\0\157\25\21\0\304\25"+
    "\u0abc\0\u042f\25\u0fd1\0\u0247\25\u21b9\0\u0239\25\7\0\37\25\1\0\12\25"+
    "\146\0\36\25\2\0\5\25\13\0\67\25\11\0\4\25\14\0\12\25"+
    "\11\0\25\25\5\0\23\25\u0370\0\105\25\13\0\57\25\20\0\21\25"+
    "\100\0\1\25\37\0\u17ed\25\23\0\u02f3\25\u250d\0\2\25\u0bfe\0\153\25"+
    "\5\0\15\25\3\0\11\25\7\0\12\25\3\0\2\25\u14c6\0\5\25"+
    "\3\0\6\25\10\0\10\25\2\0\7\25\36\0\4\25\224\0\3\25"+
    "\u01bb\0\125\25\1\0\107\25\1\0\2\25\2\0\1\25\2\0\2\25"+
    "\2\0\4\25\1\0\14\25\1\0\1\25\1\0\7\25\1\0\101\25"+
    "\1\0\4\25\2\0\10\25\1\0\7\25\1\0\34\25\1\0\4\25"+
    "\1\0\5\25\1\0\1\25\3\0\7\25\1\0\u0154\25\2\0\31\25"+
    "\1\0\31\25\1\0\37\25\1\0\31\25\1\0\37\25\1\0\31\25"+
    "\1\0\37\25\1\0\31\25\1\0\37\25\1\0\31\25\1\0\10\25"+
    "\2\0\62\25\u0200\0\67\25\4\0\62\25\10\0\1\25\16\0\1\25"+
    "\26\0\5\25\1\0\17\25\u0550\0\7\25\1\0\21\25\2\0\7\25"+
    "\1\0\2\25\1\0\5\25\u07d5\0\305\25\13\0\7\25\51\0\113\25"+
    "\5\0\12\25\u04a6\0\4\25\1\0\33\25\1\0\2\25\1\0\1\25"+
    "\2\0\1\25\1\0\12\25\1\0\4\25\1\0\1\25\1\0\1\25"+
    "\6\0\1\25\4\0\1\25\1\0\1\25\1\0\1\25\1\0\3\25"+
    "\1\0\2\25\1\0\1\25\2\0\1\25\1\0\1\25\1\0\1\25"+
    "\1\0\1\25\1\0\1\25\1\0\2\25\1\0\1\25\2\0\4\25"+
    "\1\0\7\25\1\0\4\25\1\0\4\25\1\0\1\25\1\0\12\25"+
    "\1\0\21\25\5\0\3\25\1\0\5\25\1\0\21\25\u0274\0\32\25"+
    "\6\0\32\25\6\0\32\25\u0e76\0\ua6d7\25\51\0\u1035\25\13\0\336\25"+
    "\2\0\u1682\25\u295e\0\u021e\25\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\u06ed\0"+
    "\360\25\uffff\0\uffff\0\ufe12\0";

  /** 
   * Translates characters to character classes
   */
  private static final char [] ZZ_CMAP = zzUnpackCMap(ZZ_CMAP_PACKED);

  /** 
   * Translates DFA states to action switch labels.
   */
  private static final int [] ZZ_ACTION = zzUnpackAction();

  private static final String ZZ_ACTION_PACKED_0 =
    "\1\0\1\1\1\2\1\3\1\4\1\1\1\5\1\6"+
    "\1\7\1\5\1\6\1\0\1\1\31\0\1\10\10\0"+
    "\1\11\3\0\1\12\1\13\2\0\1\14\3\0\1\15"+
    "\3\0\1\16\1\17\3\0\1\20\2\0\1\21\3\0"+
    "\1\22\1\0\1\23\2\0\1\24\1\25";

  private static int [] zzUnpackAction() {
    int [] result = new int[82];
    int offset = 0;
    offset = zzUnpackAction(ZZ_ACTION_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAction(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /** 
   * Translates a state to a row index in the transition table
   */
  private static final int [] ZZ_ROWMAP = zzUnpackRowMap();

  private static final String ZZ_ROWMAP_PACKED_0 =
    "\0\0\0\27\0\56\0\105\0\134\0\163\0\212\0\241"+
    "\0\270\0\317\0\346\0\375\0\u0114\0\u012b\0\u0142\0\u0159"+
    "\0\u0170\0\u0187\0\u019e\0\u01b5\0\u01cc\0\u01e3\0\u01fa\0\u0211"+
    "\0\u0228\0\u023f\0\u0256\0\u026d\0\u0284\0\u029b\0\u02b2\0\u02c9"+
    "\0\u02e0\0\u02f7\0\u030e\0\u0325\0\u033c\0\u0353\0\270\0\u036a"+
    "\0\u0381\0\u0398\0\u03af\0\u03c6\0\u03dd\0\u03f4\0\u040b\0\270"+
    "\0\u0422\0\u0439\0\u0450\0\270\0\270\0\u0467\0\u047e\0\270"+
    "\0\u0495\0\u04ac\0\u04c3\0\270\0\u04da\0\u04f1\0\u0508\0\270"+
    "\0\270\0\u051f\0\u0536\0\u054d\0\270\0\u0564\0\u057b\0\270"+
    "\0\u0592\0\u05a9\0\u05c0\0\270\0\u05d7\0\270\0\u05ee\0\u0605"+
    "\0\270\0\270";

  private static int [] zzUnpackRowMap() {
    int [] result = new int[82];
    int offset = 0;
    offset = zzUnpackRowMap(ZZ_ROWMAP_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackRowMap(String packed, int offset, int [] result) {
    int i = 0;  /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int high = packed.charAt(i++) << 16;
      result[j++] = high | packed.charAt(i++);
    }
    return j;
  }

  /** 
   * The transition table of the DFA
   */
  private static final int [] ZZ_TRANS = zzUnpackTrans();

  private static final String ZZ_TRANS_PACKED_0 =
    "\1\2\1\3\1\4\1\5\1\6\3\5\2\2\11\5"+
    "\1\7\1\10\1\11\1\0\1\2\3\0\1\2\3\0"+
    "\2\2\11\0\2\2\3\0\1\3\27\0\1\4\27\0"+
    "\1\5\1\0\3\5\2\0\11\5\1\12\1\13\2\0"+
    "\1\2\3\0\1\2\1\14\2\0\1\2\1\15\1\16"+
    "\5\0\1\17\1\20\1\0\2\2\2\0\1\2\2\0"+
    "\1\12\1\2\3\12\2\2\11\12\1\7\1\2\2\0"+
    "\1\2\2\0\1\13\1\2\3\13\2\2\11\13\1\2"+
    "\1\10\34\0\1\12\1\0\3\12\2\0\12\12\6\0"+
    "\1\13\1\0\3\13\2\0\11\13\1\0\1\13\10\0"+
    "\1\21\6\0\1\22\11\0\1\2\3\0\1\2\1\23"+
    "\2\0\2\2\1\24\5\0\1\25\1\26\1\0\2\2"+
    "\10\0\1\27\4\0\1\30\30\0\1\31\26\0\1\32"+
    "\20\0\1\33\35\0\1\34\16\0\1\35\6\0\1\36"+
    "\17\0\1\37\4\0\1\40\30\0\1\41\26\0\1\42"+
    "\16\0\1\43\35\0\1\44\20\0\1\45\37\0\1\46"+
    "\17\0\1\47\23\0\1\50\30\0\1\51\35\0\1\52"+
    "\15\0\1\53\35\0\1\54\20\0\1\55\37\0\1\56"+
    "\24\0\1\57\21\0\1\60\6\0\1\61\21\0\1\62"+
    "\23\0\1\63\27\0\1\64\26\0\1\65\23\0\1\66"+
    "\36\0\1\67\21\0\1\70\6\0\1\71\21\0\1\72"+
    "\23\0\1\73\27\0\1\74\31\0\1\75\34\0\1\76"+
    "\12\0\1\77\31\0\1\100\26\0\1\101\31\0\1\102"+
    "\34\0\1\103\12\0\1\104\31\0\1\105\40\0\1\106"+
    "\24\0\1\107\16\0\1\110\40\0\1\111\24\0\1\112"+
    "\25\0\1\113\17\0\1\114\35\0\1\115\17\0\1\116"+
    "\33\0\1\117\26\0\1\120\21\0\1\121\26\0\1\122"+
    "\16\0";

  private static int [] zzUnpackTrans() {
    int [] result = new int[1564];
    int offset = 0;
    offset = zzUnpackTrans(ZZ_TRANS_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackTrans(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      value--;
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /* error codes */
  private static final int ZZ_UNKNOWN_ERROR = 0;
  private static final int ZZ_NO_MATCH = 1;
  private static final int ZZ_PUSHBACK_2BIG = 2;

  /* error messages for the codes above */
  private static final String ZZ_ERROR_MSG[] = {
    "Unknown internal scanner error",
    "Error: could not match input",
    "Error: pushback value was too large"
  };

  /**
   * ZZ_ATTRIBUTE[aState] contains the attributes of state <code>aState</code>
   */
  private static final int [] ZZ_ATTRIBUTE = zzUnpackAttribute();

  private static final String ZZ_ATTRIBUTE_PACKED_0 =
    "\1\0\7\1\1\11\2\1\1\0\1\1\31\0\1\11"+
    "\10\0\1\11\3\0\2\11\2\0\1\11\3\0\1\11"+
    "\3\0\2\11\3\0\1\11\2\0\1\11\3\0\1\11"+
    "\1\0\1\11\2\0\2\11";

  private static int [] zzUnpackAttribute() {
    int [] result = new int[82];
    int offset = 0;
    offset = zzUnpackAttribute(ZZ_ATTRIBUTE_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAttribute(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }

  /** the input device */
  private java.io.Reader zzReader;

  /** the current state of the DFA */
  private int zzState;

  /** the current lexical state */
  private int zzLexicalState = YYINITIAL;

  /** this buffer contains the current text to be matched and is
      the source of the yytext() string */
  private char zzBuffer[] = new char[ZZ_BUFFERSIZE];

  /** the textposition at the last accepting state */
  private int zzMarkedPos;

  /** the current text position in the buffer */
  private int zzCurrentPos;

  /** startRead marks the beginning of the yytext() string in the buffer */
  private int zzStartRead;

  /** endRead marks the last character in the buffer, that has been read
      from input */
  private int zzEndRead;

  /** number of newlines encountered up to the start of the matched text */
  private int yyline;

  /** the number of characters up to the start of the matched text */
  private int yychar;

  /**
   * the number of characters from the last newline up to the start of the 
   * matched text
   */
  private int yycolumn;

  /** 
   * zzAtBOL == true iff the scanner is currently at the beginning of a line
   */
  private boolean zzAtBOL = true;

  /** zzAtEOF == true iff the scanner is at the EOF */
  private boolean zzAtEOF;

  /** denotes if the user-EOF-code has already been executed */
  private boolean zzEOFDone;
  
  /** 
   * The number of occupied positions in zzBuffer beyond zzEndRead.
   * When a lead/high surrogate has been read from the input stream
   * into the final zzBuffer position, this will have a value of 1;
   * otherwise, it will have a value of 0.
   */
  private int zzFinalHighSurrogate = 0;

  /* user code: */
  private static ArrayList<String> tagStack = new ArrayList<String>();

  // static method such as getTagName can be defined here as well


  /**
   * Creates a new scanner
   *
   * @param   in  the java.io.Reader to read input from.
   */
  Lexer(java.io.Reader in) {
    this.zzReader = in;
  }


  /** 
   * Unpacks the compressed character translation table.
   *
   * @param packed   the packed character translation table
   * @return         the unpacked character translation table
   */
  private static char [] zzUnpackCMap(String packed) {
    char [] map = new char[0x110000];
    int i = 0;  /* index in packed string  */
    int j = 0;  /* index in unpacked array */
    while (i < 2840) {
      int  count = packed.charAt(i++);
      char value = packed.charAt(i++);
      do map[j++] = value; while (--count > 0);
    }
    return map;
  }


  /**
   * Refills the input buffer.
   *
   * @return      <code>false</code>, iff there was new input.
   * 
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  private boolean zzRefill() throws java.io.IOException {

    /* first: make room (if you can) */
    if (zzStartRead > 0) {
      zzEndRead += zzFinalHighSurrogate;
      zzFinalHighSurrogate = 0;
      System.arraycopy(zzBuffer, zzStartRead,
                       zzBuffer, 0,
                       zzEndRead-zzStartRead);

      /* translate stored positions */
      zzEndRead-= zzStartRead;
      zzCurrentPos-= zzStartRead;
      zzMarkedPos-= zzStartRead;
      zzStartRead = 0;
    }

    /* is the buffer big enough? */
    if (zzCurrentPos >= zzBuffer.length - zzFinalHighSurrogate) {
      /* if not: blow it up */
      char newBuffer[] = new char[zzBuffer.length*2];
      System.arraycopy(zzBuffer, 0, newBuffer, 0, zzBuffer.length);
      zzBuffer = newBuffer;
      zzEndRead += zzFinalHighSurrogate;
      zzFinalHighSurrogate = 0;
    }

    /* fill the buffer with new input */
    int requested = zzBuffer.length - zzEndRead;
    int numRead = zzReader.read(zzBuffer, zzEndRead, requested);

    /* not supposed to occur according to specification of java.io.Reader */
    if (numRead == 0) {
      throw new java.io.IOException("Reader returned 0 characters. See JFlex examples for workaround.");
    }
    if (numRead > 0) {
      zzEndRead += numRead;
      /* If numRead == requested, we might have requested to few chars to
         encode a full Unicode character. We assume that a Reader would
         otherwise never return half characters. */
      if (numRead == requested) {
        if (Character.isHighSurrogate(zzBuffer[zzEndRead - 1])) {
          --zzEndRead;
          zzFinalHighSurrogate = 1;
        }
      }
      /* potentially more input available */
      return false;
    }

    /* numRead < 0 ==> end of stream */
    return true;
  }

    
  /**
   * Closes the input stream.
   */
  public final void yyclose() throws java.io.IOException {
    zzAtEOF = true;            /* indicate end of file */
    zzEndRead = zzStartRead;  /* invalidate buffer    */

    if (zzReader != null)
      zzReader.close();
  }


  /**
   * Resets the scanner to read from a new input stream.
   * Does not close the old reader.
   *
   * All internal variables are reset, the old input stream 
   * <b>cannot</b> be reused (internal buffer is discarded and lost).
   * Lexical state is set to <tt>ZZ_INITIAL</tt>.
   *
   * Internal scan buffer is resized down to its initial length, if it has grown.
   *
   * @param reader   the new input stream 
   */
  public final void yyreset(java.io.Reader reader) {
    zzReader = reader;
    zzAtBOL  = true;
    zzAtEOF  = false;
    zzEOFDone = false;
    zzEndRead = zzStartRead = 0;
    zzCurrentPos = zzMarkedPos = 0;
    zzFinalHighSurrogate = 0;
    yyline = yychar = yycolumn = 0;
    zzLexicalState = YYINITIAL;
    if (zzBuffer.length > ZZ_BUFFERSIZE)
      zzBuffer = new char[ZZ_BUFFERSIZE];
  }


  /**
   * Returns the current lexical state.
   */
  public final int yystate() {
    return zzLexicalState;
  }


  /**
   * Enters a new lexical state
   *
   * @param newState the new lexical state
   */
  public final void yybegin(int newState) {
    zzLexicalState = newState;
  }


  /**
   * Returns the text matched by the current regular expression.
   */
  public final String yytext() {
    return new String( zzBuffer, zzStartRead, zzMarkedPos-zzStartRead );
  }


  /**
   * Returns the character at position <tt>pos</tt> from the 
   * matched text. 
   * 
   * It is equivalent to yytext().charAt(pos), but faster
   *
   * @param pos the position of the character to fetch. 
   *            A value from 0 to yylength()-1.
   *
   * @return the character at position pos
   */
  public final char yycharat(int pos) {
    return zzBuffer[zzStartRead+pos];
  }


  /**
   * Returns the length of the matched text region.
   */
  public final int yylength() {
    return zzMarkedPos-zzStartRead;
  }


  /**
   * Reports an error that occured while scanning.
   *
   * In a wellformed scanner (no or only correct usage of 
   * yypushback(int) and a match-all fallback rule) this method 
   * will only be called with things that "Can't Possibly Happen".
   * If this method is called, something is seriously wrong
   * (e.g. a JFlex bug producing a faulty scanner etc.).
   *
   * Usual syntax/scanner level error handling should be done
   * in error fallback rules.
   *
   * @param   errorCode  the code of the errormessage to display
   */
  private void zzScanError(int errorCode) {
    String message;
    try {
      message = ZZ_ERROR_MSG[errorCode];
    }
    catch (ArrayIndexOutOfBoundsException e) {
      message = ZZ_ERROR_MSG[ZZ_UNKNOWN_ERROR];
    }

    throw new Error(message);
  } 


  /**
   * Pushes the specified amount of characters back into the input stream.
   *
   * They will be read again by then next call of the scanning method
   *
   * @param number  the number of characters to be read again.
   *                This number must not be greater than yylength()!
   */
  public void yypushback(int number)  {
    if ( number > yylength() )
      zzScanError(ZZ_PUSHBACK_2BIG);

    zzMarkedPos -= number;
  }


  /**
   * Resumes scanning until the next regular expression is matched,
   * the end of input is encountered or an I/O-Error occurs.
   *
   * @return      the next token
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  public Token yylex() throws java.io.IOException {
    int zzInput;
    int zzAction;

    // cached fields:
    int zzCurrentPosL;
    int zzMarkedPosL;
    int zzEndReadL = zzEndRead;
    char [] zzBufferL = zzBuffer;
    char [] zzCMapL = ZZ_CMAP;

    int [] zzTransL = ZZ_TRANS;
    int [] zzRowMapL = ZZ_ROWMAP;
    int [] zzAttrL = ZZ_ATTRIBUTE;

    while (true) {
      zzMarkedPosL = zzMarkedPos;

      boolean zzR = false;
      int zzCh;
      int zzCharCount;
      for (zzCurrentPosL = zzStartRead  ;
           zzCurrentPosL < zzMarkedPosL ;
           zzCurrentPosL += zzCharCount ) {
        zzCh = Character.codePointAt(zzBufferL, zzCurrentPosL, zzMarkedPosL);
        zzCharCount = Character.charCount(zzCh);
        switch (zzCh) {
        case '\u000B':  // fall through
        case '\u000C':  // fall through
        case '\u0085':  // fall through
        case '\u2028':  // fall through
        case '\u2029':
          yyline++;
          yycolumn = 0;
          zzR = false;
          break;
        case '\r':
          yyline++;
          yycolumn = 0;
          zzR = true;
          break;
        case '\n':
          if (zzR)
            zzR = false;
          else {
            yyline++;
            yycolumn = 0;
          }
          break;
        default:
          zzR = false;
          yycolumn += zzCharCount;
        }
      }

      if (zzR) {
        // peek one character ahead if it is \n (if we have counted one line too much)
        boolean zzPeek;
        if (zzMarkedPosL < zzEndReadL)
          zzPeek = zzBufferL[zzMarkedPosL] == '\n';
        else if (zzAtEOF)
          zzPeek = false;
        else {
          boolean eof = zzRefill();
          zzEndReadL = zzEndRead;
          zzMarkedPosL = zzMarkedPos;
          zzBufferL = zzBuffer;
          if (eof) 
            zzPeek = false;
          else 
            zzPeek = zzBufferL[zzMarkedPosL] == '\n';
        }
        if (zzPeek) yyline--;
      }
      zzAction = -1;

      zzCurrentPosL = zzCurrentPos = zzStartRead = zzMarkedPosL;
  
      zzState = ZZ_LEXSTATE[zzLexicalState];

      // set up zzAction for empty match case:
      int zzAttributes = zzAttrL[zzState];
      if ( (zzAttributes & 1) == 1 ) {
        zzAction = zzState;
      }


      zzForAction: {
        while (true) {
    
          if (zzCurrentPosL < zzEndReadL) {
            zzInput = Character.codePointAt(zzBufferL, zzCurrentPosL, zzEndReadL);
            zzCurrentPosL += Character.charCount(zzInput);
          }
          else if (zzAtEOF) {
            zzInput = YYEOF;
            break zzForAction;
          }
          else {
            // store back cached positions
            zzCurrentPos  = zzCurrentPosL;
            zzMarkedPos   = zzMarkedPosL;
            boolean eof = zzRefill();
            // get translated positions and possibly new buffer
            zzCurrentPosL  = zzCurrentPos;
            zzMarkedPosL   = zzMarkedPos;
            zzBufferL      = zzBuffer;
            zzEndReadL     = zzEndRead;
            if (eof) {
              zzInput = YYEOF;
              break zzForAction;
            }
            else {
              zzInput = Character.codePointAt(zzBufferL, zzCurrentPosL, zzEndReadL);
              zzCurrentPosL += Character.charCount(zzInput);
            }
          }
          int zzNext = zzTransL[ zzRowMapL[zzState] + zzCMapL[zzInput] ];
          if (zzNext == -1) break zzForAction;
          zzState = zzNext;

          zzAttributes = zzAttrL[zzState];
          if ( (zzAttributes & 1) == 1 ) {
            zzAction = zzState;
            zzMarkedPosL = zzCurrentPosL;
            if ( (zzAttributes & 8) == 8 ) break zzForAction;
          }

        }
      }

      // store back cached position
      zzMarkedPos = zzMarkedPosL;

      if (zzInput == YYEOF && zzStartRead == zzCurrentPos) {
        zzAtEOF = true;
          {   //System.out.println("*** Reaching end of file");
  return null;
 }
      }
      else {
        switch (zzAction < 0 ? zzAction : ZZ_ACTION[zzAction]) {
          case 1: 
            { return new Token(Token.PUNCTUATION, yytext(), yyline, yycolumn);
            } 
            // fall through
          case 22: break;
          case 2: 
            { /* skip whitespace */
            } 
            // fall through
          case 23: break;
          case 3: 
            { return new Token(Token.NUMBER, yytext(), yyline, yycolumn);
            } 
            // fall through
          case 24: break;
          case 4: 
            { return new Token(Token.WORD, yytext(), yyline, yycolumn);
            } 
            // fall through
          case 25: break;
          case 5: 
            { return new Token(Token.APOSTROPHIZED, yytext(), yyline, yycolumn);
            } 
            // fall through
          case 26: break;
          case 6: 
            { return new Token(Token.HYPHENATED, yytext(), yyline, yycolumn);
            } 
            // fall through
          case 27: break;
          case 7: 
            { return new Token(Token.ERROR, yytext(), yyline, yycolumn);
            } 
            // fall through
          case 28: break;
          case 8: 
            { return new Token(Token.OPEN_TAG, yytext(), yyline, yycolumn);
            } 
            // fall through
          case 29: break;
          case 9: 
            { return new Token(Token.OPEN_DOC, yytext(), yyline, yycolumn);
            } 
            // fall through
          case 30: break;
          case 10: 
            { return new Token(Token.OPEN_TEXT, yytext(), yyline, yycolumn);
            } 
            // fall through
          case 31: break;
          case 11: 
            { return new Token(Token.CLOSE_TAG, yytext(), yyline, yycolumn);
            } 
            // fall through
          case 32: break;
          case 12: 
            { return new Token(Token.CLOSE_DOC, yytext(), yyline, yycolumn);
            } 
            // fall through
          case 33: break;
          case 13: 
            { return new Token(Token.OPEN_DATE, yytext(), yyline, yycolumn);
            } 
            // fall through
          case 34: break;
          case 14: 
            { return new Token(Token.CLOSE_TEXT, yytext(), yyline, yycolumn);
            } 
            // fall through
          case 35: break;
          case 15: 
            { return new Token(Token.CLOSE_DATE, yytext(), yyline, yycolumn);
            } 
            // fall through
          case 36: break;
          case 16: 
            { return new Token(Token.OPEN_DOCNO, yytext(), yyline, yycolumn);
            } 
            // fall through
          case 37: break;
          case 17: 
            { return new Token(Token.CLOSE_DOCNO, yytext(), yyline, yycolumn);
            } 
            // fall through
          case 38: break;
          case 18: 
            { return new Token(Token.OPEN_LENGTH, yytext(), yyline, yycolumn);
            } 
            // fall through
          case 39: break;
          case 19: 
            { return new Token(Token.CLOSE_LENGTH, yytext(), yyline, yycolumn);
            } 
            // fall through
          case 40: break;
          case 20: 
            { return new Token(Token.OPEN_HEADLINE, yytext(), yyline, yycolumn);
            } 
            // fall through
          case 41: break;
          case 21: 
            { return new Token(Token.CLOSE_HEADLINE, yytext(), yyline, yycolumn);
            } 
            // fall through
          case 42: break;
          default:
            zzScanError(ZZ_NO_MATCH);
        }
      }
    }
  }


}
