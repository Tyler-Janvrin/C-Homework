/* The following code was generated by JFlex 1.7.0 */

/*
  File Name: tiny.flex
  JFlex specification for the TINY language
  I got this code from the warmup package in the courselink.
  The original code was written by Dr. Fei Song, and was used with permission.
*/

import java.util.ArrayList;
   

/**
 * This class is a scanner generated by 
 * <a href="http://www.jflex.de/">JFlex</a> 1.7.0
 * from the specification file <tt>news.flex</tt>
 */
class Lexer {

  /** This character denotes the end of file */
  public static final int YYEOF = -1;

  /** initial size of the lookahead buffer */
  private static final int ZZ_BUFFERSIZE = 16384;

  /** lexical states */
  public static final int YYINITIAL = 0;

  /**
   * ZZ_LEXSTATE[l] is the state in the DFA for the lexical state l
   * ZZ_LEXSTATE[l+1] is the state in the DFA for the lexical state l
   *                  at the beginning of a line
   * l is of the form l = 2*k, k a non negative integer
   */
  private static final int ZZ_LEXSTATE[] = { 
     0, 0
  };

  /** 
   * Translates characters to character classes
   */
  private static final String ZZ_CMAP_PACKED = 
    "\11\0\1\1\1\7\1\7\1\7\1\7\22\0\1\1\1\0\1\6"+
    "\4\0\1\15\3\0\1\13\1\0\1\4\1\14\1\12\12\2\2\0"+
    "\1\10\1\5\1\11\2\0\32\3\4\0\1\16\1\0\32\3\12\0"+
    "\1\7\32\0\1\1\11\0\1\16\12\0\1\16\4\0\1\16\5\0"+
    "\27\16\1\0\37\16\1\0\u01ca\16\4\0\14\16\16\0\5\16\7\0"+
    "\1\16\1\0\1\16\21\0\165\16\1\0\2\16\2\0\4\16\1\0"+
    "\1\16\6\0\1\16\1\0\3\16\1\0\1\16\1\0\24\16\1\0"+
    "\123\16\1\0\213\16\1\0\255\16\1\0\46\16\2\0\1\16\7\0"+
    "\47\16\11\0\55\16\1\0\1\16\1\0\2\16\1\0\2\16\1\0"+
    "\1\16\10\0\33\16\5\0\3\16\35\0\13\16\5\0\112\16\4\0"+
    "\146\16\1\0\10\16\2\0\12\16\1\0\23\16\2\0\1\16\20\0"+
    "\73\16\2\0\145\16\16\0\66\16\4\0\1\16\5\0\56\16\22\0"+
    "\34\16\104\0\25\16\1\0\10\16\26\0\16\16\1\0\201\16\2\0"+
    "\12\16\1\0\23\16\1\0\10\16\2\0\2\16\2\0\26\16\1\0"+
    "\7\16\1\0\1\16\3\0\4\16\2\0\11\16\2\0\2\16\2\0"+
    "\4\16\10\0\1\16\4\0\2\16\1\0\5\16\2\0\14\16\17\0"+
    "\3\16\1\0\6\16\4\0\2\16\2\0\26\16\1\0\7\16\1\0"+
    "\2\16\1\0\2\16\1\0\2\16\2\0\1\16\1\0\5\16\4\0"+
    "\2\16\2\0\3\16\3\0\1\16\7\0\4\16\1\0\1\16\7\0"+
    "\20\16\13\0\3\16\1\0\11\16\1\0\3\16\1\0\26\16\1\0"+
    "\7\16\1\0\2\16\1\0\5\16\2\0\12\16\1\0\3\16\1\0"+
    "\3\16\2\0\1\16\17\0\4\16\2\0\12\16\11\0\1\16\7\0"+
    "\3\16\1\0\10\16\2\0\2\16\2\0\26\16\1\0\7\16\1\0"+
    "\2\16\1\0\5\16\2\0\11\16\2\0\2\16\2\0\3\16\10\0"+
    "\2\16\4\0\2\16\1\0\5\16\2\0\12\16\1\0\1\16\20\0"+
    "\2\16\1\0\6\16\3\0\3\16\1\0\4\16\3\0\2\16\1\0"+
    "\1\16\1\0\2\16\3\0\2\16\3\0\3\16\3\0\14\16\4\0"+
    "\5\16\3\0\3\16\1\0\4\16\2\0\1\16\6\0\1\16\16\0"+
    "\12\16\20\0\4\16\1\0\10\16\1\0\3\16\1\0\27\16\1\0"+
    "\20\16\3\0\10\16\1\0\3\16\1\0\4\16\7\0\2\16\1\0"+
    "\3\16\5\0\4\16\2\0\12\16\20\0\4\16\1\0\10\16\1\0"+
    "\3\16\1\0\27\16\1\0\12\16\1\0\5\16\2\0\11\16\1\0"+
    "\3\16\1\0\4\16\7\0\2\16\7\0\1\16\1\0\4\16\2\0"+
    "\12\16\1\0\2\16\16\0\3\16\1\0\10\16\1\0\3\16\1\0"+
    "\51\16\2\0\10\16\1\0\3\16\1\0\5\16\5\0\4\16\7\0"+
    "\5\16\2\0\12\16\12\0\6\16\2\0\2\16\1\0\22\16\3\0"+
    "\30\16\1\0\11\16\1\0\1\16\2\0\7\16\3\0\1\16\4\0"+
    "\6\16\1\0\1\16\1\0\10\16\6\0\12\16\2\0\2\16\15\0"+
    "\72\16\5\0\17\16\1\0\12\16\47\0\2\16\1\0\1\16\2\0"+
    "\2\16\1\0\1\16\2\0\1\16\6\0\4\16\1\0\7\16\1\0"+
    "\3\16\1\0\1\16\1\0\1\16\2\0\2\16\1\0\15\16\1\0"+
    "\3\16\2\0\5\16\1\0\1\16\1\0\6\16\2\0\12\16\2\0"+
    "\4\16\40\0\1\16\27\0\2\16\6\0\12\16\13\0\1\16\1\0"+
    "\1\16\1\0\1\16\4\0\12\16\1\0\44\16\4\0\24\16\1\0"+
    "\22\16\1\0\44\16\11\0\1\16\71\0\112\16\6\0\116\16\2\0"+
    "\46\16\1\0\1\16\5\0\1\16\2\0\53\16\1\0\u014d\16\1\0"+
    "\4\16\2\0\7\16\1\0\1\16\1\0\4\16\2\0\51\16\1\0"+
    "\4\16\2\0\41\16\1\0\4\16\2\0\7\16\1\0\1\16\1\0"+
    "\4\16\2\0\17\16\1\0\71\16\1\0\4\16\2\0\103\16\2\0"+
    "\3\16\40\0\20\16\20\0\126\16\2\0\6\16\3\0\u026c\16\2\0"+
    "\21\16\1\1\32\16\5\0\113\16\3\0\13\16\7\0\15\16\1\0"+
    "\7\16\13\0\25\16\13\0\24\16\14\0\15\16\1\0\3\16\1\0"+
    "\2\16\14\0\124\16\3\0\1\16\4\0\2\16\2\0\12\16\41\0"+
    "\3\16\2\0\12\16\6\0\130\16\10\0\53\16\5\0\106\16\12\0"+
    "\37\16\1\0\14\16\4\0\14\16\12\0\50\16\2\0\5\16\13\0"+
    "\54\16\4\0\32\16\6\0\12\16\46\0\34\16\4\0\77\16\1\0"+
    "\35\16\2\0\13\16\6\0\12\16\15\0\1\16\10\0\17\16\101\0"+
    "\114\16\4\0\12\16\21\0\11\16\14\0\164\16\14\0\70\16\10\0"+
    "\12\16\3\0\61\16\2\0\11\16\107\0\3\16\1\0\43\16\1\0"+
    "\2\16\6\0\366\16\5\0\u011b\16\2\0\6\16\2\0\46\16\2\0"+
    "\6\16\2\0\10\16\1\0\1\16\1\0\1\16\1\0\1\16\1\0"+
    "\37\16\2\0\65\16\1\0\7\16\1\0\1\16\3\0\3\16\1\0"+
    "\7\16\3\0\4\16\2\0\6\16\4\0\15\16\5\0\3\16\1\0"+
    "\7\16\3\0\13\1\35\0\1\7\1\7\5\0\1\1\17\0\2\16"+
    "\23\0\1\16\12\0\1\1\21\0\1\16\15\0\1\16\20\0\15\16"+
    "\63\0\41\16\21\0\1\16\4\0\1\16\2\0\12\16\1\0\1\16"+
    "\3\0\5\16\6\0\1\16\1\0\1\16\1\0\1\16\1\0\4\16"+
    "\1\0\13\16\2\0\4\16\5\0\5\16\4\0\1\16\21\0\51\16"+
    "\u032d\0\64\16\u0716\0\57\16\1\0\57\16\1\0\205\16\6\0\11\16"+
    "\14\0\46\16\1\0\1\16\5\0\1\16\2\0\70\16\7\0\1\16"+
    "\17\0\30\16\11\0\7\16\1\0\7\16\1\0\7\16\1\0\7\16"+
    "\1\0\7\16\1\0\7\16\1\0\7\16\1\0\7\16\1\0\40\16"+
    "\57\0\1\16\u01d0\0\1\1\4\0\3\16\31\0\17\16\1\0\5\16"+
    "\2\0\5\16\4\0\126\16\2\0\2\16\2\0\3\16\1\0\132\16"+
    "\1\0\4\16\5\0\51\16\3\0\136\16\21\0\33\16\65\0\20\16"+
    "\u0200\0\u19b6\16\112\0\u51d6\16\52\0\u048d\16\103\0\56\16\2\0\u010d\16"+
    "\3\0\34\16\24\0\63\16\1\0\12\16\1\0\163\16\45\0\11\16"+
    "\2\0\147\16\2\0\44\16\1\0\10\16\77\0\61\16\30\0\64\16"+
    "\14\0\106\16\12\0\12\16\6\0\30\16\3\0\1\16\1\0\1\16"+
    "\2\0\56\16\2\0\44\16\14\0\35\16\3\0\101\16\16\0\13\16"+
    "\6\0\37\16\1\0\67\16\11\0\16\16\2\0\12\16\6\0\27\16"+
    "\3\0\111\16\30\0\3\16\2\0\20\16\2\0\5\16\12\0\6\16"+
    "\2\0\6\16\2\0\6\16\11\0\7\16\1\0\7\16\1\0\53\16"+
    "\1\0\12\16\12\0\173\16\1\0\2\16\2\0\12\16\6\0\u2ba4\16"+
    "\14\0\27\16\4\0\61\16\u2104\0\u016e\16\2\0\152\16\46\0\7\16"+
    "\14\0\5\16\5\0\14\16\1\0\15\16\1\0\5\16\1\0\1\16"+
    "\1\0\2\16\1\0\2\16\1\0\154\16\41\0\u016b\16\22\0\100\16"+
    "\2\0\66\16\50\0\14\16\4\0\20\16\20\0\20\16\3\0\2\16"+
    "\30\0\3\16\40\0\5\16\1\0\207\16\23\0\12\16\7\0\32\16"+
    "\4\0\1\16\1\0\32\16\13\0\131\16\3\0\6\16\2\0\6\16"+
    "\2\0\6\16\2\0\3\16\43\0\14\16\1\0\32\16\1\0\23\16"+
    "\1\0\2\16\1\0\17\16\2\0\16\16\42\0\173\16\105\0\65\16"+
    "\210\0\1\16\202\0\35\16\3\0\61\16\17\0\1\16\37\0\40\16"+
    "\20\0\33\16\5\0\53\16\5\0\36\16\2\0\44\16\4\0\10\16"+
    "\1\0\5\16\52\0\236\16\2\0\12\16\6\0\44\16\4\0\44\16"+
    "\4\0\50\16\10\0\64\16\234\0\u0137\16\11\0\26\16\12\0\10\16"+
    "\230\0\6\16\2\0\1\16\1\0\54\16\1\0\2\16\3\0\1\16"+
    "\2\0\27\16\12\0\27\16\11\0\37\16\101\0\23\16\1\0\2\16"+
    "\12\0\26\16\12\0\32\16\106\0\70\16\6\0\2\16\100\0\4\16"+
    "\1\0\2\16\5\0\10\16\1\0\3\16\1\0\33\16\4\0\3\16"+
    "\4\0\1\16\40\0\35\16\3\0\35\16\43\0\10\16\1\0\36\16"+
    "\31\0\66\16\12\0\26\16\12\0\23\16\15\0\22\16\156\0\111\16"+
    "\67\0\63\16\15\0\63\16\u030d\0\107\16\37\0\12\16\17\0\74\16"+
    "\25\0\31\16\7\0\12\16\6\0\65\16\1\0\12\16\20\0\44\16"+
    "\2\0\1\16\11\0\105\16\5\0\3\16\3\0\13\16\1\0\1\16"+
    "\43\0\22\16\1\0\45\16\6\0\1\16\101\0\7\16\1\0\1\16"+
    "\1\0\4\16\1\0\17\16\1\0\12\16\7\0\73\16\5\0\12\16"+
    "\6\0\4\16\1\0\10\16\2\0\2\16\2\0\26\16\1\0\7\16"+
    "\1\0\2\16\1\0\5\16\2\0\11\16\2\0\2\16\2\0\3\16"+
    "\2\0\1\16\6\0\1\16\5\0\7\16\2\0\7\16\3\0\5\16"+
    "\213\0\113\16\5\0\12\16\46\0\106\16\1\0\1\16\10\0\12\16"+
    "\246\0\66\16\2\0\11\16\27\0\6\16\42\0\101\16\3\0\1\16"+
    "\13\0\12\16\46\0\70\16\10\0\12\16\66\0\32\16\3\0\17\16"+
    "\4\0\12\16\u0166\0\112\16\25\0\1\16\u01c0\0\71\16\u0107\0\11\16"+
    "\1\0\55\16\1\0\11\16\17\0\12\16\30\0\36\16\2\0\26\16"+
    "\1\0\16\16\u0349\0\u039a\16\146\0\157\16\21\0\304\16\u0abc\0\u042f\16"+
    "\u0fd1\0\u0247\16\u21b9\0\u0239\16\7\0\37\16\1\0\12\16\146\0\36\16"+
    "\2\0\5\16\13\0\67\16\11\0\4\16\14\0\12\16\11\0\25\16"+
    "\5\0\23\16\u0370\0\105\16\13\0\57\16\20\0\21\16\100\0\1\16"+
    "\37\0\u17ed\16\23\0\u02f3\16\u250d\0\2\16\u0bfe\0\153\16\5\0\15\16"+
    "\3\0\11\16\7\0\12\16\3\0\2\16\u14c6\0\5\16\3\0\6\16"+
    "\10\0\10\16\2\0\7\16\36\0\4\16\224\0\3\16\u01bb\0\125\16"+
    "\1\0\107\16\1\0\2\16\2\0\1\16\2\0\2\16\2\0\4\16"+
    "\1\0\14\16\1\0\1\16\1\0\7\16\1\0\101\16\1\0\4\16"+
    "\2\0\10\16\1\0\7\16\1\0\34\16\1\0\4\16\1\0\5\16"+
    "\1\0\1\16\3\0\7\16\1\0\u0154\16\2\0\31\16\1\0\31\16"+
    "\1\0\37\16\1\0\31\16\1\0\37\16\1\0\31\16\1\0\37\16"+
    "\1\0\31\16\1\0\37\16\1\0\31\16\1\0\10\16\2\0\62\16"+
    "\u0200\0\67\16\4\0\62\16\10\0\1\16\16\0\1\16\26\0\5\16"+
    "\1\0\17\16\u0550\0\7\16\1\0\21\16\2\0\7\16\1\0\2\16"+
    "\1\0\5\16\u07d5\0\305\16\13\0\7\16\51\0\113\16\5\0\12\16"+
    "\u04a6\0\4\16\1\0\33\16\1\0\2\16\1\0\1\16\2\0\1\16"+
    "\1\0\12\16\1\0\4\16\1\0\1\16\1\0\1\16\6\0\1\16"+
    "\4\0\1\16\1\0\1\16\1\0\1\16\1\0\3\16\1\0\2\16"+
    "\1\0\1\16\2\0\1\16\1\0\1\16\1\0\1\16\1\0\1\16"+
    "\1\0\1\16\1\0\2\16\1\0\1\16\2\0\4\16\1\0\7\16"+
    "\1\0\4\16\1\0\4\16\1\0\1\16\1\0\12\16\1\0\21\16"+
    "\5\0\3\16\1\0\5\16\1\0\21\16\u0274\0\32\16\6\0\32\16"+
    "\6\0\32\16\u0e76\0\ua6d7\16\51\0\u1035\16\13\0\336\16\2\0\u1682\16"+
    "\u295e\0\u021e\16\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\u06ed\0"+
    "\360\16\uffff\0\uffff\0\ufe12\0";

  /** 
   * Translates characters to character classes
   */
  private static final char [] ZZ_CMAP = zzUnpackCMap(ZZ_CMAP_PACKED);

  /** 
   * Translates DFA states to action switch labels.
   */
  private static final int [] ZZ_ACTION = zzUnpackAction();

  private static final String ZZ_ACTION_PACKED_0 =
    "\1\0\1\1\1\2\1\3\1\4\5\1\1\5\1\6"+
    "\1\0\1\7\1\3\1\6\2\0\2\1\2\3\1\7"+
    "\3\0\2\10\1\0\1\1\4\0\2\11\5\0\1\10"+
    "\1\0\1\11";

  private static int [] zzUnpackAction() {
    int [] result = new int[44];
    int offset = 0;
    offset = zzUnpackAction(ZZ_ACTION_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAction(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /** 
   * Translates a state to a row index in the transition table
   */
  private static final int [] ZZ_ROWMAP = zzUnpackRowMap();

  private static final String ZZ_ROWMAP_PACKED_0 =
    "\0\0\0\17\0\36\0\55\0\74\0\113\0\132\0\151"+
    "\0\170\0\207\0\226\0\245\0\264\0\303\0\322\0\341"+
    "\0\360\0\377\0\u010e\0\u011d\0\u012c\0\264\0\u013b\0\u014a"+
    "\0\u0159\0\u0168\0\226\0\17\0\u0177\0\u0186\0\u0195\0\u01a4"+
    "\0\u01b3\0\u01c2\0\226\0\17\0\u01d1\0\u01e0\0\u01ef\0\u01fe"+
    "\0\u020d\0\u01d1\0\u021c\0\u020d";

  private static int [] zzUnpackRowMap() {
    int [] result = new int[44];
    int offset = 0;
    offset = zzUnpackRowMap(ZZ_ROWMAP_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackRowMap(String packed, int offset, int [] result) {
    int i = 0;  /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int high = packed.charAt(i++) << 16;
      result[j++] = high | packed.charAt(i++);
    }
    return j;
  }

  /** 
   * The transition table of the DFA
   */
  private static final int [] ZZ_TRANS = zzUnpackTrans();

  private static final String ZZ_TRANS_PACKED_0 =
    "\1\2\1\3\1\4\1\5\1\6\2\2\1\3\1\7"+
    "\2\2\1\10\1\11\1\12\1\13\1\2\3\0\3\2"+
    "\1\0\6\2\2\0\1\3\5\0\1\3\11\0\1\4"+
    "\1\5\1\14\7\0\1\15\1\16\3\0\2\5\1\14"+
    "\10\0\1\16\1\0\1\2\1\0\1\17\1\20\3\2"+
    "\1\0\4\2\1\11\1\2\1\0\1\2\1\21\2\22"+
    "\1\23\2\2\1\21\2\2\1\24\3\2\1\0\1\2"+
    "\1\0\1\25\1\0\3\2\1\0\4\2\1\11\1\2"+
    "\1\0\1\2\1\0\1\26\1\0\3\2\1\0\6\2"+
    "\1\0\1\2\1\0\2\27\3\2\1\0\6\2\22\0"+
    "\2\20\15\0\1\26\16\0\2\27\15\0\1\17\1\20"+
    "\1\14\7\0\1\15\4\0\2\20\1\14\13\0\1\21"+
    "\3\22\2\0\1\21\2\0\1\30\5\0\1\31\1\22"+
    "\1\32\1\22\2\0\1\31\1\0\1\33\5\0\1\2"+
    "\1\31\1\22\1\32\1\23\2\2\1\31\1\2\1\34"+
    "\4\2\1\0\1\2\1\30\2\35\1\36\2\2\1\30"+
    "\6\2\3\0\1\25\11\0\1\15\4\0\2\27\11\0"+
    "\1\16\2\0\1\30\3\35\2\0\1\30\10\0\1\31"+
    "\1\0\1\37\3\0\1\31\1\0\1\33\6\0\1\31"+
    "\2\32\1\22\1\40\1\0\1\31\1\0\1\33\6\0"+
    "\1\41\1\35\1\42\1\35\2\0\1\41\1\0\1\43"+
    "\5\0\1\2\1\41\1\35\1\42\1\36\2\2\1\41"+
    "\1\2\1\44\4\2\3\0\2\37\1\0\1\40\17\0"+
    "\1\45\11\0\1\41\1\0\1\46\3\0\1\41\1\0"+
    "\1\43\6\0\1\41\2\42\1\35\1\47\1\0\1\41"+
    "\1\0\1\43\5\0\6\45\1\50\1\0\7\45\2\0"+
    "\2\46\1\0\1\47\17\0\1\51\10\0\1\45\1\50"+
    "\4\45\1\50\1\31\1\45\1\52\5\45\6\51\1\53"+
    "\1\0\10\51\1\53\4\51\1\53\1\41\1\51\1\54"+
    "\5\51";

  private static int [] zzUnpackTrans() {
    int [] result = new int[555];
    int offset = 0;
    offset = zzUnpackTrans(ZZ_TRANS_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackTrans(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      value--;
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /* error codes */
  private static final int ZZ_UNKNOWN_ERROR = 0;
  private static final int ZZ_NO_MATCH = 1;
  private static final int ZZ_PUSHBACK_2BIG = 2;

  /* error messages for the codes above */
  private static final String ZZ_ERROR_MSG[] = {
    "Unknown internal scanner error",
    "Error: could not match input",
    "Error: pushback value was too large"
  };

  /**
   * ZZ_ATTRIBUTE[aState] contains the attributes of state <code>aState</code>
   */
  private static final int [] ZZ_ATTRIBUTE = zzUnpackAttribute();

  private static final String ZZ_ATTRIBUTE_PACKED_0 =
    "\1\0\11\1\1\11\1\1\1\0\3\1\2\0\5\1"+
    "\3\0\1\11\1\1\1\0\1\1\4\0\1\11\1\1"+
    "\5\0\1\1\1\0\1\1";

  private static int [] zzUnpackAttribute() {
    int [] result = new int[44];
    int offset = 0;
    offset = zzUnpackAttribute(ZZ_ATTRIBUTE_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAttribute(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }

  /** the input device */
  private java.io.Reader zzReader;

  /** the current state of the DFA */
  private int zzState;

  /** the current lexical state */
  private int zzLexicalState = YYINITIAL;

  /** this buffer contains the current text to be matched and is
      the source of the yytext() string */
  private char zzBuffer[] = new char[ZZ_BUFFERSIZE];

  /** the textposition at the last accepting state */
  private int zzMarkedPos;

  /** the current text position in the buffer */
  private int zzCurrentPos;

  /** startRead marks the beginning of the yytext() string in the buffer */
  private int zzStartRead;

  /** endRead marks the last character in the buffer, that has been read
      from input */
  private int zzEndRead;

  /** number of newlines encountered up to the start of the matched text */
  private int yyline;

  /** the number of characters up to the start of the matched text */
  private int yychar;

  /**
   * the number of characters from the last newline up to the start of the 
   * matched text
   */
  private int yycolumn;

  /** 
   * zzAtBOL == true iff the scanner is currently at the beginning of a line
   */
  private boolean zzAtBOL = true;

  /** zzAtEOF == true iff the scanner is at the EOF */
  private boolean zzAtEOF;

  /** denotes if the user-EOF-code has already been executed */
  private boolean zzEOFDone;
  
  /** 
   * The number of occupied positions in zzBuffer beyond zzEndRead.
   * When a lead/high surrogate has been read from the input stream
   * into the final zzBuffer position, this will have a value of 1;
   * otherwise, it will have a value of 0.
   */
  private int zzFinalHighSurrogate = 0;

  /* user code: */
  private static ArrayList<String> tagStack = new ArrayList<String>();
  private static int filterCount = 0;

   /* Returns true if we should be ignoring text.*/
   private static boolean ignoring(){
      return filterCount > 0;
   }


   /* Peek operation for the tag stack. Returns empty string if the stack is empty.*/
  private static String peek(){
      if(tagStack.size() == 0){
         return "";
      }
      else{
         return tagStack.get(tagStack.size() - 1);
      }
  }

   /* Pop operation for the tag stack. Returns empty string if the stack is empty.*/
  private static String pop(){
      if(tagStack.size() == 0){
         return "";
      }
      else{
         String returnval = tagStack.get(tagStack.size() - 1);
         tagStack.remove(tagStack.size() - 1);
         return returnval;
      }
  }

   /* Push operation for the tag stack. */ 
  private static void push(String name){
      tagStack.add(name);
  }

   // feels slightly better to declare this string this way. less "magic number-ey"
   final static String TAGNAMECHARS = "abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ-";

   /* Since tag names can contain hyphens, I need to define this function to check if characters are valid. */
  private static boolean isTagNameChar(char c){
      return TAGNAMECHARS.indexOf(c) >= 0;
  }
  
  /* Extracts the tag name from strings matching the tag regex. We can assume that input
  into this function is formatted as a tag, becasue it will only be called after matching to a regex.*/
  private static String getTagName(String tag){
      String name = "";

      int start = 0;
      int end = 0;

      boolean reading = false;

      for(int i = 0; i < tag.length(); i++){
         if(!reading){
            if(isTagNameChar(tag.charAt(i))){ // read in characters until we see a tagname character
               reading = true; // we start reading, and read until we hit a non-tagname character
               name = name + tag.charAt(i);
            }
         }
         else{
            if(!isTagNameChar(tag.charAt(i))){
               break; // we've seen all the tag name characters, and have hit whitespace or >
            }
            else{
               name = name + tag.charAt(i); // otherwi
            }
         }
      }
      return name.toUpperCase();
  }

   // checks to see if two tags have the same name
  private static boolean compareTagNames(String name1, String name2){
      return false;
  }

  // static method such as getTagName can be defined here as well


  /**
   * Creates a new scanner
   *
   * @param   in  the java.io.Reader to read input from.
   */
  Lexer(java.io.Reader in) {
    this.zzReader = in;
  }


  /** 
   * Unpacks the compressed character translation table.
   *
   * @param packed   the packed character translation table
   * @return         the unpacked character translation table
   */
  private static char [] zzUnpackCMap(String packed) {
    char [] map = new char[0x110000];
    int i = 0;  /* index in packed string  */
    int j = 0;  /* index in unpacked array */
    while (i < 2816) {
      int  count = packed.charAt(i++);
      char value = packed.charAt(i++);
      do map[j++] = value; while (--count > 0);
    }
    return map;
  }


  /**
   * Refills the input buffer.
   *
   * @return      <code>false</code>, iff there was new input.
   * 
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  private boolean zzRefill() throws java.io.IOException {

    /* first: make room (if you can) */
    if (zzStartRead > 0) {
      zzEndRead += zzFinalHighSurrogate;
      zzFinalHighSurrogate = 0;
      System.arraycopy(zzBuffer, zzStartRead,
                       zzBuffer, 0,
                       zzEndRead-zzStartRead);

      /* translate stored positions */
      zzEndRead-= zzStartRead;
      zzCurrentPos-= zzStartRead;
      zzMarkedPos-= zzStartRead;
      zzStartRead = 0;
    }

    /* is the buffer big enough? */
    if (zzCurrentPos >= zzBuffer.length - zzFinalHighSurrogate) {
      /* if not: blow it up */
      char newBuffer[] = new char[zzBuffer.length*2];
      System.arraycopy(zzBuffer, 0, newBuffer, 0, zzBuffer.length);
      zzBuffer = newBuffer;
      zzEndRead += zzFinalHighSurrogate;
      zzFinalHighSurrogate = 0;
    }

    /* fill the buffer with new input */
    int requested = zzBuffer.length - zzEndRead;
    int numRead = zzReader.read(zzBuffer, zzEndRead, requested);

    /* not supposed to occur according to specification of java.io.Reader */
    if (numRead == 0) {
      throw new java.io.IOException("Reader returned 0 characters. See JFlex examples for workaround.");
    }
    if (numRead > 0) {
      zzEndRead += numRead;
      /* If numRead == requested, we might have requested to few chars to
         encode a full Unicode character. We assume that a Reader would
         otherwise never return half characters. */
      if (numRead == requested) {
        if (Character.isHighSurrogate(zzBuffer[zzEndRead - 1])) {
          --zzEndRead;
          zzFinalHighSurrogate = 1;
        }
      }
      /* potentially more input available */
      return false;
    }

    /* numRead < 0 ==> end of stream */
    return true;
  }

    
  /**
   * Closes the input stream.
   */
  public final void yyclose() throws java.io.IOException {
    zzAtEOF = true;            /* indicate end of file */
    zzEndRead = zzStartRead;  /* invalidate buffer    */

    if (zzReader != null)
      zzReader.close();
  }


  /**
   * Resets the scanner to read from a new input stream.
   * Does not close the old reader.
   *
   * All internal variables are reset, the old input stream 
   * <b>cannot</b> be reused (internal buffer is discarded and lost).
   * Lexical state is set to <tt>ZZ_INITIAL</tt>.
   *
   * Internal scan buffer is resized down to its initial length, if it has grown.
   *
   * @param reader   the new input stream 
   */
  public final void yyreset(java.io.Reader reader) {
    zzReader = reader;
    zzAtBOL  = true;
    zzAtEOF  = false;
    zzEOFDone = false;
    zzEndRead = zzStartRead = 0;
    zzCurrentPos = zzMarkedPos = 0;
    zzFinalHighSurrogate = 0;
    yyline = yychar = yycolumn = 0;
    zzLexicalState = YYINITIAL;
    if (zzBuffer.length > ZZ_BUFFERSIZE)
      zzBuffer = new char[ZZ_BUFFERSIZE];
  }


  /**
   * Returns the current lexical state.
   */
  public final int yystate() {
    return zzLexicalState;
  }


  /**
   * Enters a new lexical state
   *
   * @param newState the new lexical state
   */
  public final void yybegin(int newState) {
    zzLexicalState = newState;
  }


  /**
   * Returns the text matched by the current regular expression.
   */
  public final String yytext() {
    return new String( zzBuffer, zzStartRead, zzMarkedPos-zzStartRead );
  }


  /**
   * Returns the character at position <tt>pos</tt> from the 
   * matched text. 
   * 
   * It is equivalent to yytext().charAt(pos), but faster
   *
   * @param pos the position of the character to fetch. 
   *            A value from 0 to yylength()-1.
   *
   * @return the character at position pos
   */
  public final char yycharat(int pos) {
    return zzBuffer[zzStartRead+pos];
  }


  /**
   * Returns the length of the matched text region.
   */
  public final int yylength() {
    return zzMarkedPos-zzStartRead;
  }


  /**
   * Reports an error that occured while scanning.
   *
   * In a wellformed scanner (no or only correct usage of 
   * yypushback(int) and a match-all fallback rule) this method 
   * will only be called with things that "Can't Possibly Happen".
   * If this method is called, something is seriously wrong
   * (e.g. a JFlex bug producing a faulty scanner etc.).
   *
   * Usual syntax/scanner level error handling should be done
   * in error fallback rules.
   *
   * @param   errorCode  the code of the errormessage to display
   */
  private void zzScanError(int errorCode) {
    String message;
    try {
      message = ZZ_ERROR_MSG[errorCode];
    }
    catch (ArrayIndexOutOfBoundsException e) {
      message = ZZ_ERROR_MSG[ZZ_UNKNOWN_ERROR];
    }

    throw new Error(message);
  } 


  /**
   * Pushes the specified amount of characters back into the input stream.
   *
   * They will be read again by then next call of the scanning method
   *
   * @param number  the number of characters to be read again.
   *                This number must not be greater than yylength()!
   */
  public void yypushback(int number)  {
    if ( number > yylength() )
      zzScanError(ZZ_PUSHBACK_2BIG);

    zzMarkedPos -= number;
  }


  /**
   * Resumes scanning until the next regular expression is matched,
   * the end of input is encountered or an I/O-Error occurs.
   *
   * @return      the next token
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  public Token yylex() throws java.io.IOException {
    int zzInput;
    int zzAction;

    // cached fields:
    int zzCurrentPosL;
    int zzMarkedPosL;
    int zzEndReadL = zzEndRead;
    char [] zzBufferL = zzBuffer;
    char [] zzCMapL = ZZ_CMAP;

    int [] zzTransL = ZZ_TRANS;
    int [] zzRowMapL = ZZ_ROWMAP;
    int [] zzAttrL = ZZ_ATTRIBUTE;

    while (true) {
      zzMarkedPosL = zzMarkedPos;

      boolean zzR = false;
      int zzCh;
      int zzCharCount;
      for (zzCurrentPosL = zzStartRead  ;
           zzCurrentPosL < zzMarkedPosL ;
           zzCurrentPosL += zzCharCount ) {
        zzCh = Character.codePointAt(zzBufferL, zzCurrentPosL, zzMarkedPosL);
        zzCharCount = Character.charCount(zzCh);
        switch (zzCh) {
        case '\u000B':  // fall through
        case '\u000C':  // fall through
        case '\u0085':  // fall through
        case '\u2028':  // fall through
        case '\u2029':
          yyline++;
          yycolumn = 0;
          zzR = false;
          break;
        case '\r':
          yyline++;
          yycolumn = 0;
          zzR = true;
          break;
        case '\n':
          if (zzR)
            zzR = false;
          else {
            yyline++;
            yycolumn = 0;
          }
          break;
        default:
          zzR = false;
          yycolumn += zzCharCount;
        }
      }

      if (zzR) {
        // peek one character ahead if it is \n (if we have counted one line too much)
        boolean zzPeek;
        if (zzMarkedPosL < zzEndReadL)
          zzPeek = zzBufferL[zzMarkedPosL] == '\n';
        else if (zzAtEOF)
          zzPeek = false;
        else {
          boolean eof = zzRefill();
          zzEndReadL = zzEndRead;
          zzMarkedPosL = zzMarkedPos;
          zzBufferL = zzBuffer;
          if (eof) 
            zzPeek = false;
          else 
            zzPeek = zzBufferL[zzMarkedPosL] == '\n';
        }
        if (zzPeek) yyline--;
      }
      zzAction = -1;

      zzCurrentPosL = zzCurrentPos = zzStartRead = zzMarkedPosL;
  
      zzState = ZZ_LEXSTATE[zzLexicalState];

      // set up zzAction for empty match case:
      int zzAttributes = zzAttrL[zzState];
      if ( (zzAttributes & 1) == 1 ) {
        zzAction = zzState;
      }


      zzForAction: {
        while (true) {
    
          if (zzCurrentPosL < zzEndReadL) {
            zzInput = Character.codePointAt(zzBufferL, zzCurrentPosL, zzEndReadL);
            zzCurrentPosL += Character.charCount(zzInput);
          }
          else if (zzAtEOF) {
            zzInput = YYEOF;
            break zzForAction;
          }
          else {
            // store back cached positions
            zzCurrentPos  = zzCurrentPosL;
            zzMarkedPos   = zzMarkedPosL;
            boolean eof = zzRefill();
            // get translated positions and possibly new buffer
            zzCurrentPosL  = zzCurrentPos;
            zzMarkedPosL   = zzMarkedPos;
            zzBufferL      = zzBuffer;
            zzEndReadL     = zzEndRead;
            if (eof) {
              zzInput = YYEOF;
              break zzForAction;
            }
            else {
              zzInput = Character.codePointAt(zzBufferL, zzCurrentPosL, zzEndReadL);
              zzCurrentPosL += Character.charCount(zzInput);
            }
          }
          int zzNext = zzTransL[ zzRowMapL[zzState] + zzCMapL[zzInput] ];
          if (zzNext == -1) break zzForAction;
          zzState = zzNext;

          zzAttributes = zzAttrL[zzState];
          if ( (zzAttributes & 1) == 1 ) {
            zzAction = zzState;
            zzMarkedPosL = zzCurrentPosL;
            if ( (zzAttributes & 8) == 8 ) break zzForAction;
          }

        }
      }

      // store back cached position
      zzMarkedPos = zzMarkedPosL;

      if (zzInput == YYEOF && zzStartRead == zzCurrentPos) {
        zzAtEOF = true;
          {   //System.out.println("*** Reaching end of file");
  return null;
 }
      }
      else {
        switch (zzAction < 0 ? zzAction : ZZ_ACTION[zzAction]) {
          case 1: 
            { if(!ignoring()){ return new Token(Token.PUNCTUATION, yytext(), yyline, yycolumn); }
            } 
            // fall through
          case 10: break;
          case 2: 
            { /* skip whitespace */
            } 
            // fall through
          case 11: break;
          case 3: 
            { if (!ignoring()){return new Token(Token.NUMBER, yytext(), yyline, yycolumn);}
            } 
            // fall through
          case 12: break;
          case 4: 
            { if(!ignoring()){ return new Token(Token.WORD, yytext(), yyline, yycolumn); }
            } 
            // fall through
          case 13: break;
          case 5: 
            { if(!ignoring()){ return new Token(Token.ERROR, yytext(), yyline, yycolumn); }
            } 
            // fall through
          case 14: break;
          case 6: 
            { if(!ignoring()){return new Token(Token.HYPHENATED, yytext(), yyline, yycolumn); }
            } 
            // fall through
          case 15: break;
          case 7: 
            { if(!ignoring()){return new Token(Token.APOSTROPHIZED, yytext(), yyline, yycolumn);}
            } 
            // fall through
          case 16: break;
          case 8: 
            { String name = getTagName(yytext());

      push(name);

         // System.out.println(name + "\n");
      if(name.equals("DOC")){
         if(!ignoring()){
            return new Token(Token.OPEN_DOC, yytext(), yyline, yycolumn);
         } 
      }
      else if(name.equals("TEXT")){
         if(!ignoring()){
            return new Token(Token.OPEN_TEXT, yytext(), yyline, yycolumn);
         }    
      }
      else if(name.equals("DATE")){
         if(!ignoring()){
            return new Token(Token.OPEN_DATE, yytext(), yyline, yycolumn);
         }    
         
      }
      else if(name.equals("DOCNO")){
         if(!ignoring()){
            return new Token(Token.OPEN_DOCNO, yytext(), yyline, yycolumn);
         }    
         
         
      }
      else if(name.equals("HEADLINE")){
         if(!ignoring()){
            return new Token(Token.OPEN_HEADLINE, yytext(), yyline, yycolumn);
         }    
         
      }
      else if(name.equals("LENGTH")){
         
         if(!ignoring()){
            return new Token(Token.OPEN_LENGTH, yytext(), yyline, yycolumn);
         }    
      }
      else if(name.equals("P")){
         if(!ignoring()){
            return new Token(Token.CLOSE_P, yytext(), yyline, yycolumn);
         }    
         
      }
      else{
         filterCount++; // if we're adding an irrelevant tag, filter count increases
         if(!ignoring()){
            return new Token(Token.OPEN_TAG, yytext(), yyline, yycolumn);
         }
      }
            } 
            // fall through
          case 17: break;
          case 9: 
            { String name = getTagName(yytext());

      String stackname = peek();

      if(stackname.equals(name)){
         pop(); // pop the name of the stack and continue as normal
         if(name.equals("DOC")){
            if(!ignoring()){
               return new Token(Token.CLOSE_DOC, yytext(), yyline, yycolumn);
            }         
         }
         else if(name.equals("TEXT")){
            if(!ignoring()){
               return new Token(Token.CLOSE_TEXT, yytext(), yyline, yycolumn);
            }       
            
         }
         else if(name.equals("DATE")){
            if(!ignoring()){
               return new Token(Token.CLOSE_DATE, yytext(), yyline, yycolumn);
            }       
            
         }
         else if(name.equals("DOCNO")){
            if(!ignoring()){
               return new Token(Token.CLOSE_DOCNO, yytext(), yyline, yycolumn);
            }       
            
         }
         else if(name.equals("HEADLINE")){
            if(!ignoring()){
               return new Token(Token.CLOSE_HEADLINE, yytext(), yyline, yycolumn);
            }       
            
         }
         else if(name.equals("LENGTH")){
            if(!ignoring()){
               return new Token(Token.CLOSE_LENGTH, yytext(), yyline, yycolumn);
            }       
            
         }
         else if(name.equals("P")){
            if(!ignoring()){
               return new Token(Token.CLOSE_P, yytext(), yyline, yycolumn);
            }    
            
         }
         else{
            // if it doesn't match any of the relevant tags, we know we're removing an IRRELEVANT tag.
            if(!ignoring()){
               return new Token(Token.CLOSE_TAG, yytext(), yyline, yycolumn);
            }    
            
            filterCount--; // if we're closing an irrelevant tag, we can reduce the filter count.
         }
      }
      else{
         // if the name doesn't match, add an error token and don't pop.
         // do this even if tokens are being filtered
         return new Token(Token.ERROR, yytext(), yyline, yycolumn);
      }
            } 
            // fall through
          case 18: break;
          default:
            zzScanError(ZZ_NO_MATCH);
        }
      }
    }
  }


}
