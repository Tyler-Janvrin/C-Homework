// DO NOT EDIT
// Generated by JFlex 1.9.1 http://jflex.de/
// source: news.flex

/*
  File Name: tiny.flex
  JFlex specification for the TINY language
  I got this code from the warmup package in the courselink.
  The original code was written by Dr. Fei Song, and was used with permission.
*/

import java.util.ArrayList;
   

@SuppressWarnings("fallthrough")
class Lexer {

  /** This character denotes the end of file. */
  public static final int YYEOF = -1;

  /** Initial size of the lookahead buffer. */
  private static final int ZZ_BUFFERSIZE = 16384;

  // Lexical states.
  public static final int YYINITIAL = 0;

  /**
   * ZZ_LEXSTATE[l] is the state in the DFA for the lexical state l
   * ZZ_LEXSTATE[l+1] is the state in the DFA for the lexical state l
   *                  at the beginning of a line
   * l is of the form l = 2*k, k a non negative integer
   */
  private static final int ZZ_LEXSTATE[] = {
     0, 0
  };

  /**
   * Top-level table for translating characters to character classes
   */
  private static final int [] ZZ_CMAP_TOP = zzUnpackcmap_top();

  private static final String ZZ_CMAP_TOP_PACKED_0 =
    "\1\0\1\u0100\1\u0200\1\u0300\1\u0400\1\u0500\1\u0600\1\u0700"+
    "\1\u0800\1\u0900\1\u0a00\1\u0b00\1\u0c00\1\u0d00\1\u0e00\1\u0f00"+
    "\1\u1000\1\u0100\1\u1100\1\u1200\1\u1300\1\u0100\1\u1400\1\u1500"+
    "\1\u1600\1\u1700\1\u1800\1\u1900\1\u1a00\1\u1b00\1\u0100\1\u1c00"+
    "\1\u1d00\1\u1e00\2\u1f00\1\u2000\7\u1f00\1\u2100\1\u2200\1\u2300"+
    "\1\u1f00\1\u2400\1\u2500\2\u1f00\31\u0100\1\u2600\121\u0100\1\u2700"+
    "\4\u0100\1\u2800\1\u0100\1\u2900\1\u2a00\1\u2b00\1\u2c00\1\u2d00"+
    "\1\u2e00\53\u0100\1\u2f00\10\u3000\31\u1f00\1\u0100\1\u3100\1\u3200"+
    "\1\u0100\1\u3300\1\u3400\1\u3500\1\u3600\1\u3700\1\u3800\1\u3900"+
    "\1\u3a00\1\u3b00\1\u0100\1\u3c00\1\u3d00\1\u3e00\1\u3f00\1\u4000"+
    "\1\u4100\1\u4200\1\u1f00\1\u4300\1\u4400\1\u4500\1\u4600\1\u4700"+
    "\1\u4800\1\u4900\1\u4a00\1\u4b00\1\u4c00\1\u4d00\1\u4e00\1\u1f00"+
    "\1\u4f00\1\u5000\1\u5100\1\u1f00\3\u0100\1\u5200\1\u5300\1\u5400"+
    "\12\u1f00\4\u0100\1\u5500\17\u1f00\2\u0100\1\u5600\41\u1f00\2\u0100"+
    "\1\u5700\1\u5800\2\u1f00\1\u5900\1\u5a00\27\u0100\1\u5b00\2\u0100"+
    "\1\u5c00\45\u1f00\1\u0100\1\u5d00\1\u5e00\11\u1f00\1\u5f00\24\u1f00"+
    "\1\u6000\1\u6100\1\u1f00\1\u6200\1\u6300\1\u6400\1\u6500\2\u1f00"+
    "\1\u6600\5\u1f00\1\u6700\1\u6800\1\u6900\5\u1f00\1\u6a00\1\u6b00"+
    "\4\u1f00\1\u6c00\2\u1f00\1\u6d00\16\u1f00\246\u0100\1\u6e00\20\u0100"+
    "\1\u6f00\1\u7000\25\u0100\1\u7100\34\u0100\1\u7200\14\u1f00\2\u0100"+
    "\1\u7300\u0b06\u1f00\1\u2700\u02fe\u1f00";

  private static int [] zzUnpackcmap_top() {
    int [] result = new int[4352];
    int offset = 0;
    offset = zzUnpackcmap_top(ZZ_CMAP_TOP_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackcmap_top(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /**
   * Second-level tables for translating characters to character classes
   */
  private static final int [] ZZ_CMAP_BLOCKS = zzUnpackcmap_blocks();

  private static final String ZZ_CMAP_BLOCKS_PACKED_0 =
    "\11\0\2\1\1\2\2\1\22\0\1\1\6\0\1\3"+
    "\5\0\1\4\1\0\1\5\12\6\2\0\1\7\1\0"+
    "\1\10\2\0\1\11\1\12\1\13\1\14\1\15\1\12"+
    "\1\16\1\17\1\20\2\12\1\21\1\12\1\22\1\23"+
    "\4\12\1\24\3\12\1\25\2\12\4\0\1\26\1\0"+
    "\32\12\12\0\1\2\32\0\1\26\11\0\1\26\12\0"+
    "\1\26\4\0\1\26\5\0\27\26\1\0\37\26\1\0"+
    "\u01ca\26\4\0\14\26\16\0\5\26\7\0\1\26\1\0"+
    "\1\26\21\0\165\26\1\0\2\26\2\0\4\26\1\0"+
    "\1\26\6\0\1\26\1\0\3\26\1\0\1\26\1\0"+
    "\24\26\1\0\123\26\1\0\213\26\1\0\255\26\1\0"+
    "\46\26\2\0\1\26\6\0\51\26\10\0\55\26\1\0"+
    "\1\26\1\0\2\26\1\0\2\26\1\0\1\26\10\0"+
    "\33\26\4\0\4\26\35\0\13\26\5\0\112\26\4\0"+
    "\146\26\1\0\10\26\2\0\12\26\1\0\23\26\2\0"+
    "\1\26\20\0\73\26\2\0\145\26\16\0\66\26\4\0"+
    "\1\26\2\0\1\26\2\0\56\26\22\0\34\26\4\0"+
    "\13\26\65\0\25\26\1\0\10\26\25\0\17\26\1\0"+
    "\201\26\2\0\12\26\1\0\23\26\1\0\10\26\2\0"+
    "\2\26\2\0\26\26\1\0\7\26\1\0\1\26\3\0"+
    "\4\26\2\0\11\26\2\0\2\26\2\0\4\26\10\0"+
    "\1\26\4\0\2\26\1\0\5\26\2\0\14\26\12\0"+
    "\1\26\1\0\1\26\2\0\3\26\1\0\6\26\4\0"+
    "\2\26\2\0\26\26\1\0\7\26\1\0\2\26\1\0"+
    "\2\26\1\0\2\26\2\0\1\26\1\0\5\26\4\0"+
    "\2\26\2\0\3\26\3\0\1\26\7\0\4\26\1\0"+
    "\1\26\7\0\20\26\13\0\3\26\1\0\11\26\1\0"+
    "\3\26\1\0\26\26\1\0\7\26\1\0\2\26\1\0"+
    "\5\26\2\0\12\26\1\0\3\26\1\0\3\26\2\0"+
    "\1\26\17\0\4\26\2\0\12\26\11\0\7\26\1\0"+
    "\3\26\1\0\10\26\2\0\2\26\2\0\26\26\1\0"+
    "\7\26\1\0\2\26\1\0\5\26\2\0\11\26\2\0"+
    "\2\26\2\0\3\26\10\0\2\26\4\0\2\26\1\0"+
    "\5\26\2\0\12\26\1\0\1\26\20\0\2\26\1\0"+
    "\6\26\3\0\3\26\1\0\4\26\3\0\2\26\1\0"+
    "\1\26\1\0\2\26\3\0\2\26\3\0\3\26\3\0"+
    "\14\26\4\0\5\26\3\0\3\26\1\0\4\26\2\0"+
    "\1\26\6\0\1\26\16\0\12\26\20\0\15\26\1\0"+
    "\3\26\1\0\27\26\1\0\20\26\3\0\10\26\1\0"+
    "\3\26\1\0\4\26\7\0\2\26\1\0\3\26\5\0"+
    "\4\26\2\0\12\26\20\0\4\26\1\0\10\26\1\0"+
    "\3\26\1\0\27\26\1\0\12\26\1\0\5\26\2\0"+
    "\11\26\1\0\3\26\1\0\4\26\7\0\2\26\7\0"+
    "\1\26\1\0\4\26\2\0\12\26\1\0\2\26\15\0"+
    "\4\26\1\0\10\26\1\0\3\26\1\0\63\26\1\0"+
    "\3\26\1\0\5\26\5\0\4\26\7\0\5\26\2\0"+
    "\12\26\12\0\6\26\2\0\2\26\1\0\22\26\3\0"+
    "\30\26\1\0\11\26\1\0\1\26\2\0\7\26\3\0"+
    "\1\26\4\0\6\26\1\0\1\26\1\0\10\26\6\0"+
    "\12\26\2\0\2\26\15\0\72\26\5\0\17\26\1\0"+
    "\12\26\47\0\2\26\1\0\1\26\1\0\5\26\1\0"+
    "\30\26\1\0\1\26\1\0\27\26\2\0\5\26\1\0"+
    "\1\26\1\0\6\26\2\0\12\26\2\0\4\26\40\0"+
    "\1\26\27\0\2\26\6\0\12\26\13\0\1\26\1\0"+
    "\1\26\1\0\1\26\4\0\12\26\1\0\44\26\4\0"+
    "\24\26\1\0\22\26\1\0\44\26\11\0\1\26\71\0"+
    "\112\26\6\0\116\26\2\0\46\26\1\0\1\26\5\0"+
    "\1\26\2\0\53\26\1\0\115\26\1\0\4\26\2\0"+
    "\7\26\1\0\1\26\1\0\4\26\2\0\51\26\1\0"+
    "\4\26\2\0\41\26\1\0\4\26\2\0\7\26\1\0"+
    "\1\26\1\0\4\26\2\0\17\26\1\0\71\26\1\0"+
    "\4\26\2\0\103\26\2\0\3\26\40\0\20\26\20\0"+
    "\126\26\2\0\6\26\3\0\u016c\26\2\0\54\26\5\0"+
    "\113\26\3\0\13\26\7\0\15\26\1\0\7\26\13\0"+
    "\25\26\13\0\24\26\14\0\15\26\1\0\3\26\1\0"+
    "\2\26\14\0\124\26\3\0\1\26\4\0\2\26\2\0"+
    "\12\26\41\0\3\26\2\0\12\26\6\0\131\26\7\0"+
    "\53\26\5\0\106\26\12\0\37\26\1\0\14\26\4\0"+
    "\14\26\12\0\50\26\2\0\5\26\13\0\54\26\4\0"+
    "\32\26\6\0\12\26\46\0\34\26\4\0\77\26\1\0"+
    "\35\26\2\0\13\26\6\0\12\26\15\0\1\26\10\0"+
    "\17\26\101\0\114\26\4\0\12\26\21\0\11\26\14\0"+
    "\164\26\14\0\70\26\10\0\12\26\3\0\61\26\2\0"+
    "\11\26\7\0\53\26\2\0\3\26\20\0\3\26\1\0"+
    "\47\26\5\0\372\26\1\0\33\26\2\0\6\26\2\0"+
    "\46\26\2\0\6\26\2\0\10\26\1\0\1\26\1\0"+
    "\1\26\1\0\1\26\1\0\37\26\2\0\65\26\1\0"+
    "\7\26\1\0\1\26\3\0\3\26\1\0\7\26\3\0"+
    "\4\26\2\0\6\26\4\0\15\26\5\0\3\26\1\0"+
    "\7\26\3\0\13\26\35\0\2\2\5\0\1\26\17\0"+
    "\2\26\23\0\1\26\12\0\1\26\21\0\1\26\15\0"+
    "\1\26\20\0\15\26\63\0\41\26\21\0\1\26\4\0"+
    "\1\26\2\0\12\26\1\0\1\26\3\0\5\26\6\0"+
    "\1\26\1\0\1\26\1\0\1\26\1\0\4\26\1\0"+
    "\13\26\2\0\4\26\5\0\5\26\4\0\1\26\21\0"+
    "\51\26\u022d\0\64\26\26\0\57\26\1\0\57\26\1\0"+
    "\205\26\6\0\11\26\14\0\46\26\1\0\1\26\5\0"+
    "\1\26\2\0\70\26\7\0\1\26\17\0\30\26\11\0"+
    "\7\26\1\0\7\26\1\0\7\26\1\0\7\26\1\0"+
    "\7\26\1\0\7\26\1\0\7\26\1\0\7\26\1\0"+
    "\40\26\57\0\1\26\320\0\1\26\4\0\3\26\31\0"+
    "\17\26\1\0\5\26\2\0\5\26\4\0\126\26\2\0"+
    "\2\26\2\0\3\26\1\0\132\26\1\0\4\26\5\0"+
    "\53\26\1\0\136\26\21\0\33\26\65\0\306\26\112\0"+
    "\360\26\20\0\215\26\103\0\56\26\2\0\15\26\3\0"+
    "\34\26\24\0\63\26\1\0\12\26\1\0\163\26\45\0"+
    "\11\26\2\0\147\26\2\0\65\26\2\0\5\26\60\0"+
    "\61\26\30\0\64\26\14\0\106\26\12\0\12\26\6\0"+
    "\30\26\3\0\1\26\1\0\61\26\2\0\44\26\14\0"+
    "\35\26\3\0\101\26\16\0\13\26\6\0\37\26\1\0"+
    "\67\26\11\0\16\26\2\0\12\26\6\0\27\26\3\0"+
    "\111\26\30\0\3\26\2\0\20\26\2\0\5\26\12\0"+
    "\6\26\2\0\6\26\2\0\6\26\11\0\7\26\1\0"+
    "\7\26\1\0\53\26\1\0\14\26\10\0\173\26\1\0"+
    "\2\26\2\0\12\26\6\0\244\26\14\0\27\26\4\0"+
    "\61\26\u0104\0\156\26\2\0\152\26\46\0\7\26\14\0"+
    "\5\26\5\0\14\26\1\0\15\26\1\0\5\26\1\0"+
    "\1\26\1\0\2\26\1\0\2\26\1\0\154\26\41\0"+
    "\153\26\22\0\100\26\2\0\66\26\50\0\14\26\4\0"+
    "\20\26\20\0\20\26\3\0\2\26\30\0\3\26\40\0"+
    "\5\26\1\0\207\26\23\0\12\26\7\0\32\26\4\0"+
    "\1\26\1\0\32\26\13\0\131\26\3\0\6\26\2\0"+
    "\6\26\2\0\6\26\2\0\3\26\43\0\14\26\1\0"+
    "\32\26\1\0\23\26\1\0\2\26\1\0\17\26\2\0"+
    "\16\26\42\0\173\26\105\0\65\26\210\0\1\26\202\0"+
    "\35\26\3\0\61\26\17\0\1\26\37\0\40\26\15\0"+
    "\36\26\5\0\53\26\5\0\36\26\2\0\44\26\4\0"+
    "\10\26\1\0\5\26\52\0\236\26\2\0\12\26\6\0"+
    "\44\26\4\0\44\26\4\0\50\26\10\0\64\26\234\0"+
    "\67\26\11\0\26\26\12\0\10\26\230\0\6\26\2\0"+
    "\1\26\1\0\54\26\1\0\2\26\3\0\1\26\2\0"+
    "\27\26\12\0\27\26\11\0\37\26\101\0\23\26\1\0"+
    "\2\26\12\0\26\26\12\0\32\26\106\0\70\26\6\0"+
    "\2\26\100\0\4\26\1\0\2\26\5\0\10\26\1\0"+
    "\3\26\1\0\35\26\2\0\3\26\4\0\1\26\40\0"+
    "\35\26\3\0\35\26\43\0\10\26\1\0\36\26\31\0"+
    "\66\26\12\0\26\26\12\0\23\26\15\0\22\26\156\0"+
    "\111\26\67\0\63\26\15\0\63\26\15\0\50\26\10\0"+
    "\12\26\306\0\35\26\12\0\1\26\10\0\41\26\217\0"+
    "\27\26\11\0\107\26\37\0\12\26\17\0\74\26\25\0"+
    "\31\26\7\0\12\26\6\0\65\26\1\0\12\26\4\0"+
    "\3\26\11\0\44\26\2\0\1\26\11\0\105\26\4\0"+
    "\4\26\3\0\13\26\1\0\1\26\43\0\22\26\1\0"+
    "\45\26\6\0\1\26\101\0\7\26\1\0\1\26\1\0"+
    "\4\26\1\0\17\26\1\0\12\26\7\0\73\26\5\0"+
    "\12\26\6\0\4\26\1\0\10\26\2\0\2\26\2\0"+
    "\26\26\1\0\7\26\1\0\2\26\1\0\5\26\1\0"+
    "\12\26\2\0\2\26\2\0\3\26\2\0\1\26\6\0"+
    "\1\26\5\0\7\26\2\0\7\26\3\0\5\26\213\0"+
    "\113\26\5\0\12\26\4\0\2\26\40\0\106\26\1\0"+
    "\1\26\10\0\12\26\246\0\66\26\2\0\11\26\27\0"+
    "\6\26\42\0\101\26\3\0\1\26\13\0\12\26\46\0"+
    "\71\26\7\0\12\26\66\0\33\26\2\0\17\26\4\0"+
    "\12\26\306\0\73\26\145\0\112\26\25\0\1\26\240\0"+
    "\10\26\2\0\56\26\2\0\10\26\1\0\2\26\33\0"+
    "\77\26\10\0\1\26\10\0\112\26\3\0\1\26\42\0"+
    "\71\26\7\0\11\26\1\0\55\26\1\0\11\26\17\0"+
    "\12\26\30\0\36\26\2\0\26\26\1\0\16\26\111\0"+
    "\7\26\1\0\2\26\1\0\54\26\3\0\1\26\1\0"+
    "\2\26\1\0\11\26\10\0\12\26\6\0\6\26\1\0"+
    "\2\26\1\0\45\26\1\0\2\26\1\0\6\26\7\0"+
    "\12\26\u0136\0\27\26\11\0\232\26\146\0\157\26\21\0"+
    "\304\26\274\0\57\26\321\0\107\26\271\0\71\26\7\0"+
    "\37\26\1\0\12\26\146\0\36\26\2\0\5\26\13\0"+
    "\67\26\11\0\4\26\14\0\12\26\11\0\25\26\5\0"+
    "\23\26\260\0\100\26\200\0\113\26\4\0\71\26\7\0"+
    "\21\26\100\0\2\26\1\0\1\26\34\0\370\26\10\0"+
    "\363\26\15\0\37\26\61\0\3\26\21\0\4\26\10\0"+
    "\u018c\26\4\0\153\26\5\0\15\26\3\0\11\26\7\0"+
    "\12\26\3\0\2\26\306\0\5\26\3\0\6\26\10\0"+
    "\10\26\2\0\7\26\36\0\4\26\224\0\3\26\273\0"+
    "\125\26\1\0\107\26\1\0\2\26\2\0\1\26\2\0"+
    "\2\26\2\0\4\26\1\0\14\26\1\0\1\26\1\0"+
    "\7\26\1\0\101\26\1\0\4\26\2\0\10\26\1\0"+
    "\7\26\1\0\34\26\1\0\4\26\1\0\5\26\1\0"+
    "\1\26\3\0\7\26\1\0\u0154\26\2\0\31\26\1\0"+
    "\31\26\1\0\37\26\1\0\31\26\1\0\37\26\1\0"+
    "\31\26\1\0\37\26\1\0\31\26\1\0\37\26\1\0"+
    "\31\26\1\0\10\26\2\0\151\26\4\0\62\26\10\0"+
    "\1\26\16\0\1\26\26\0\5\26\1\0\17\26\120\0"+
    "\7\26\1\0\21\26\2\0\7\26\1\0\2\26\1\0"+
    "\5\26\325\0\55\26\3\0\16\26\2\0\12\26\4\0"+
    "\1\26\u0171\0\72\26\6\0\305\26\13\0\7\26\51\0"+
    "\114\26\4\0\12\26\246\0\4\26\1\0\33\26\1\0"+
    "\2\26\1\0\1\26\2\0\1\26\1\0\12\26\1\0"+
    "\4\26\1\0\1\26\1\0\1\26\6\0\1\26\4\0"+
    "\1\26\1\0\1\26\1\0\1\26\1\0\3\26\1\0"+
    "\2\26\1\0\1\26\2\0\1\26\1\0\1\26\1\0"+
    "\1\26\1\0\1\26\1\0\1\26\1\0\2\26\1\0"+
    "\1\26\2\0\4\26\1\0\7\26\1\0\4\26\1\0"+
    "\4\26\1\0\1\26\1\0\12\26\1\0\21\26\5\0"+
    "\3\26\1\0\5\26\1\0\21\26\164\0\32\26\6\0"+
    "\32\26\6\0\32\26\166\0\327\26\51\0\65\26\13\0"+
    "\336\26\2\0\u0182\26\16\0\u0131\26\37\0\36\26\342\0";

  private static int [] zzUnpackcmap_blocks() {
    int [] result = new int[29696];
    int offset = 0;
    offset = zzUnpackcmap_blocks(ZZ_CMAP_BLOCKS_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackcmap_blocks(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }

  /**
   * Translates DFA states to action switch labels.
   */
  private static final int [] ZZ_ACTION = zzUnpackAction();

  private static final String ZZ_ACTION_PACKED_0 =
    "\1\0\1\1\1\2\1\3\1\4\1\5\1\1\1\6"+
    "\1\7\1\3\1\4\1\1\41\0\1\10\3\0\1\11"+
    "\2\0\1\12\3\0\1\13\1\0\1\14\3\0\1\15"+
    "\1\16\3\0\1\17\1\20\2\0\1\21\3\0\1\22"+
    "\1\0\1\23\2\0\1\24\1\25";

  private static int [] zzUnpackAction() {
    int [] result = new int[82];
    int offset = 0;
    offset = zzUnpackAction(ZZ_ACTION_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAction(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /**
   * Translates a state to a row index in the transition table
   */
  private static final int [] ZZ_ROWMAP = zzUnpackRowMap();

  private static final String ZZ_ROWMAP_PACKED_0 =
    "\0\0\0\27\0\56\0\105\0\134\0\163\0\212\0\241"+
    "\0\270\0\317\0\346\0\375\0\u0114\0\u012b\0\u0142\0\u0159"+
    "\0\u0170\0\u0187\0\u019e\0\u01b5\0\u01cc\0\u01e3\0\u01fa\0\u0211"+
    "\0\u0228\0\u023f\0\u0256\0\u026d\0\u0284\0\u029b\0\u02b2\0\u02c9"+
    "\0\u02e0\0\u02f7\0\u030e\0\u0325\0\u033c\0\u0353\0\u036a\0\u0381"+
    "\0\u0398\0\u03af\0\u03c6\0\u03dd\0\u03f4\0\270\0\u040b\0\u0422"+
    "\0\u0439\0\270\0\u0450\0\u0467\0\270\0\u047e\0\u0495\0\u04ac"+
    "\0\270\0\u04c3\0\270\0\u04da\0\u04f1\0\u0508\0\270\0\270"+
    "\0\u051f\0\u0536\0\u054d\0\270\0\270\0\u0564\0\u057b\0\270"+
    "\0\u0592\0\u05a9\0\u05c0\0\270\0\u05d7\0\270\0\u05ee\0\u0605"+
    "\0\270\0\270";

  private static int [] zzUnpackRowMap() {
    int [] result = new int[82];
    int offset = 0;
    offset = zzUnpackRowMap(ZZ_ROWMAP_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackRowMap(String packed, int offset, int [] result) {
    int i = 0;  /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length() - 1;
    while (i < l) {
      int high = packed.charAt(i++) << 16;
      result[j++] = high | packed.charAt(i++);
    }
    return j;
  }

  /**
   * The transition table of the DFA
   */
  private static final int [] ZZ_TRANS = zzUnpacktrans();

  private static final String ZZ_TRANS_PACKED_0 =
    "\1\2\1\3\1\0\1\4\1\5\1\2\1\6\1\7"+
    "\1\2\15\10\1\11\1\2\2\0\3\2\1\0\2\2"+
    "\17\0\1\3\25\0\1\2\2\0\1\4\2\2\1\0"+
    "\2\2\15\12\1\0\1\2\2\0\1\2\1\5\1\2"+
    "\1\0\2\2\15\13\7\0\1\6\20\0\1\2\2\0"+
    "\2\2\1\14\1\0\2\2\3\0\1\15\2\0\1\16"+
    "\1\0\1\17\2\0\1\20\5\0\1\12\1\13\4\0"+
    "\15\10\33\0\1\12\5\0\15\12\5\0\1\13\4\0"+
    "\15\13\1\0\1\2\2\0\3\2\1\0\2\2\3\0"+
    "\1\21\2\0\1\22\1\0\1\23\2\0\1\24\13\0"+
    "\1\25\11\0\1\26\20\0\1\27\26\0\1\30\22\0"+
    "\1\31\3\0\1\32\22\0\1\33\11\0\1\34\20\0"+
    "\1\35\26\0\1\36\22\0\1\37\3\0\1\40\35\0"+
    "\1\41\15\0\1\42\24\0\1\43\37\0\1\44\22\0"+
    "\1\45\35\0\1\46\25\0\1\47\15\0\1\50\24\0"+
    "\1\51\37\0\1\52\22\0\1\53\35\0\1\54\16\0"+
    "\1\55\21\0\1\56\11\0\1\57\20\0\1\60\30\0"+
    "\1\61\20\0\1\62\42\0\1\63\17\0\1\64\21\0"+
    "\1\65\11\0\1\66\20\0\1\67\30\0\1\70\20\0"+
    "\1\71\42\0\1\72\12\0\1\73\41\0\1\74\24\0"+
    "\1\75\31\0\1\76\12\0\1\77\26\0\1\100\41\0"+
    "\1\101\24\0\1\102\31\0\1\103\12\0\1\104\26\0"+
    "\1\105\36\0\1\106\25\0\1\107\17\0\1\110\36\0"+
    "\1\111\25\0\1\112\31\0\1\113\14\0\1\114\40\0"+
    "\1\115\14\0\1\116\33\0\1\117\26\0\1\120\21\0"+
    "\1\121\26\0\1\122\16\0";

  private static int [] zzUnpacktrans() {
    int [] result = new int[1564];
    int offset = 0;
    offset = zzUnpacktrans(ZZ_TRANS_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpacktrans(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      value--;
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /** Error code for "Unknown internal scanner error". */
  private static final int ZZ_UNKNOWN_ERROR = 0;
  /** Error code for "could not match input". */
  private static final int ZZ_NO_MATCH = 1;
  /** Error code for "pushback value was too large". */
  private static final int ZZ_PUSHBACK_2BIG = 2;

  /**
   * Error messages for {@link #ZZ_UNKNOWN_ERROR}, {@link #ZZ_NO_MATCH}, and
   * {@link #ZZ_PUSHBACK_2BIG} respectively.
   */
  private static final String ZZ_ERROR_MSG[] = {
    "Unknown internal scanner error",
    "Error: could not match input",
    "Error: pushback value was too large"
  };

  /**
   * ZZ_ATTRIBUTE[aState] contains the attributes of state {@code aState}
   */
  private static final int [] ZZ_ATTRIBUTE = zzUnpackAttribute();

  private static final String ZZ_ATTRIBUTE_PACKED_0 =
    "\1\0\7\1\1\11\3\1\41\0\1\11\3\0\1\11"+
    "\2\0\1\11\3\0\1\11\1\0\1\11\3\0\2\11"+
    "\3\0\2\11\2\0\1\11\3\0\1\11\1\0\1\11"+
    "\2\0\2\11";

  private static int [] zzUnpackAttribute() {
    int [] result = new int[82];
    int offset = 0;
    offset = zzUnpackAttribute(ZZ_ATTRIBUTE_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAttribute(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }

  /** Input device. */
  private java.io.Reader zzReader;

  /** Current state of the DFA. */
  private int zzState;

  /** Current lexical state. */
  private int zzLexicalState = YYINITIAL;

  /**
   * This buffer contains the current text to be matched and is the source of the {@link #yytext()}
   * string.
   */
  private char zzBuffer[] = new char[Math.min(ZZ_BUFFERSIZE, zzMaxBufferLen())];

  /** Text position at the last accepting state. */
  private int zzMarkedPos;

  /** Current text position in the buffer. */
  private int zzCurrentPos;

  /** Marks the beginning of the {@link #yytext()} string in the buffer. */
  private int zzStartRead;

  /** Marks the last character in the buffer, that has been read from input. */
  private int zzEndRead;

  /**
   * Whether the scanner is at the end of file.
   * @see #yyatEOF
   */
  private boolean zzAtEOF;

  /**
   * The number of occupied positions in {@link #zzBuffer} beyond {@link #zzEndRead}.
   *
   * <p>When a lead/high surrogate has been read from the input stream into the final
   * {@link #zzBuffer} position, this will have a value of 1; otherwise, it will have a value of 0.
   */
  private int zzFinalHighSurrogate = 0;

  /** Number of newlines encountered up to the start of the matched text. */
  private int yyline;

  /** Number of characters from the last newline up to the start of the matched text. */
  private int yycolumn;

  /** Number of characters up to the start of the matched text. */
  @SuppressWarnings("unused")
  private long yychar;

  /** Whether the scanner is currently at the beginning of a line. */
  @SuppressWarnings("unused")
  private boolean zzAtBOL = true;

  /** Whether the user-EOF-code has already been executed. */
  @SuppressWarnings("unused")
  private boolean zzEOFDone;

  /* user code: */
  private static ArrayList<String> tagStack = new ArrayList<String>();

  // static method such as getTagName can be defined here as well


  /**
   * Creates a new scanner
   *
   * @param   in  the java.io.Reader to read input from.
   */
  Lexer(java.io.Reader in) {
    this.zzReader = in;
  }


  /** Returns the maximum size of the scanner buffer, which limits the size of tokens. */
  private int zzMaxBufferLen() {
    return Integer.MAX_VALUE;
  }

  /**  Whether the scanner buffer can grow to accommodate a larger token. */
  private boolean zzCanGrow() {
    return true;
  }

  /**
   * Translates raw input code points to DFA table row
   */
  private static int zzCMap(int input) {
    int offset = input & 255;
    return offset == input ? ZZ_CMAP_BLOCKS[offset] : ZZ_CMAP_BLOCKS[ZZ_CMAP_TOP[input >> 8] | offset];
  }

  /**
   * Refills the input buffer.
   *
   * @return {@code false} iff there was new input.
   * @exception java.io.IOException  if any I/O-Error occurs
   */
  private boolean zzRefill() throws java.io.IOException {

    /* first: make room (if you can) */
    if (zzStartRead > 0) {
      zzEndRead += zzFinalHighSurrogate;
      zzFinalHighSurrogate = 0;
      System.arraycopy(zzBuffer, zzStartRead,
                       zzBuffer, 0,
                       zzEndRead - zzStartRead);

      /* translate stored positions */
      zzEndRead -= zzStartRead;
      zzCurrentPos -= zzStartRead;
      zzMarkedPos -= zzStartRead;
      zzStartRead = 0;
    }

    /* is the buffer big enough? */
    if (zzCurrentPos >= zzBuffer.length - zzFinalHighSurrogate && zzCanGrow()) {
      /* if not, and it can grow: blow it up */
      char newBuffer[] = new char[Math.min(zzBuffer.length * 2, zzMaxBufferLen())];
      System.arraycopy(zzBuffer, 0, newBuffer, 0, zzBuffer.length);
      zzBuffer = newBuffer;
      zzEndRead += zzFinalHighSurrogate;
      zzFinalHighSurrogate = 0;
    }

    /* fill the buffer with new input */
    int requested = zzBuffer.length - zzEndRead;
    int numRead = zzReader.read(zzBuffer, zzEndRead, requested);

    /* not supposed to occur according to specification of java.io.Reader */
    if (numRead == 0) {
      if (requested == 0) {
        throw new java.io.EOFException("Scan buffer limit reached ["+zzBuffer.length+"]");
      }
      else {
        throw new java.io.IOException(
            "Reader returned 0 characters. See JFlex examples/zero-reader for a workaround.");
      }
    }
    if (numRead > 0) {
      zzEndRead += numRead;
      if (Character.isHighSurrogate(zzBuffer[zzEndRead - 1])) {
        if (numRead == requested) { // We requested too few chars to encode a full Unicode character
          --zzEndRead;
          zzFinalHighSurrogate = 1;
        } else {                    // There is room in the buffer for at least one more char
          int c = zzReader.read();  // Expecting to read a paired low surrogate char
          if (c == -1) {
            return true;
          } else {
            zzBuffer[zzEndRead++] = (char)c;
          }
        }
      }
      /* potentially more input available */
      return false;
    }

    /* numRead < 0 ==> end of stream */
    return true;
  }


  /**
   * Closes the input reader.
   *
   * @throws java.io.IOException if the reader could not be closed.
   */
  public final void yyclose() throws java.io.IOException {
    zzAtEOF = true; // indicate end of file
    zzEndRead = zzStartRead; // invalidate buffer

    if (zzReader != null) {
      zzReader.close();
    }
  }


  /**
   * Resets the scanner to read from a new input stream.
   *
   * <p>Does not close the old reader.
   *
   * <p>All internal variables are reset, the old input stream <b>cannot</b> be reused (internal
   * buffer is discarded and lost). Lexical state is set to {@code ZZ_INITIAL}.
   *
   * <p>Internal scan buffer is resized down to its initial length, if it has grown.
   *
   * @param reader The new input stream.
   */
  public final void yyreset(java.io.Reader reader) {
    zzReader = reader;
    zzEOFDone = false;
    yyResetPosition();
    zzLexicalState = YYINITIAL;
    int initBufferSize = Math.min(ZZ_BUFFERSIZE, zzMaxBufferLen());
    if (zzBuffer.length > initBufferSize) {
      zzBuffer = new char[initBufferSize];
    }
  }

  /**
   * Resets the input position.
   */
  private final void yyResetPosition() {
      zzAtBOL  = true;
      zzAtEOF  = false;
      zzCurrentPos = 0;
      zzMarkedPos = 0;
      zzStartRead = 0;
      zzEndRead = 0;
      zzFinalHighSurrogate = 0;
      yyline = 0;
      yycolumn = 0;
      yychar = 0L;
  }


  /**
   * Returns whether the scanner has reached the end of the reader it reads from.
   *
   * @return whether the scanner has reached EOF.
   */
  public final boolean yyatEOF() {
    return zzAtEOF;
  }


  /**
   * Returns the current lexical state.
   *
   * @return the current lexical state.
   */
  public final int yystate() {
    return zzLexicalState;
  }


  /**
   * Enters a new lexical state.
   *
   * @param newState the new lexical state
   */
  public final void yybegin(int newState) {
    zzLexicalState = newState;
  }


  /**
   * Returns the text matched by the current regular expression.
   *
   * @return the matched text.
   */
  public final String yytext() {
    return new String(zzBuffer, zzStartRead, zzMarkedPos-zzStartRead);
  }


  /**
   * Returns the character at the given position from the matched text.
   *
   * <p>It is equivalent to {@code yytext().charAt(pos)}, but faster.
   *
   * @param position the position of the character to fetch. A value from 0 to {@code yylength()-1}.
   *
   * @return the character at {@code position}.
   */
  public final char yycharat(int position) {
    return zzBuffer[zzStartRead + position];
  }


  /**
   * How many characters were matched.
   *
   * @return the length of the matched text region.
   */
  public final int yylength() {
    return zzMarkedPos-zzStartRead;
  }


  /**
   * Reports an error that occurred while scanning.
   *
   * <p>In a well-formed scanner (no or only correct usage of {@code yypushback(int)} and a
   * match-all fallback rule) this method will only be called with things that
   * "Can't Possibly Happen".
   *
   * <p>If this method is called, something is seriously wrong (e.g. a JFlex bug producing a faulty
   * scanner etc.).
   *
   * <p>Usual syntax/scanner level error handling should be done in error fallback rules.
   *
   * @param errorCode the code of the error message to display.
   */
  private static void zzScanError(int errorCode) {
    String message;
    try {
      message = ZZ_ERROR_MSG[errorCode];
    } catch (ArrayIndexOutOfBoundsException e) {
      message = ZZ_ERROR_MSG[ZZ_UNKNOWN_ERROR];
    }

    throw new Error(message);
  }


  /**
   * Pushes the specified amount of characters back into the input stream.
   *
   * <p>They will be read again by then next call of the scanning method.
   *
   * @param number the number of characters to be read again. This number must not be greater than
   *     {@link #yylength()}.
   */
  public void yypushback(int number)  {
    if ( number > yylength() )
      zzScanError(ZZ_PUSHBACK_2BIG);

    zzMarkedPos -= number;
  }




  /**
   * Resumes scanning until the next regular expression is matched, the end of input is encountered
   * or an I/O-Error occurs.
   *
   * @return the next token.
   * @exception java.io.IOException if any I/O-Error occurs.
   */
  public Token yylex() throws java.io.IOException
  {
    int zzInput;
    int zzAction;

    // cached fields:
    int zzCurrentPosL;
    int zzMarkedPosL;
    int zzEndReadL = zzEndRead;
    char[] zzBufferL = zzBuffer;

    int [] zzTransL = ZZ_TRANS;
    int [] zzRowMapL = ZZ_ROWMAP;
    int [] zzAttrL = ZZ_ATTRIBUTE;

    while (true) {
      zzMarkedPosL = zzMarkedPos;

      boolean zzR = false;
      int zzCh;
      int zzCharCount;
      for (zzCurrentPosL = zzStartRead  ;
           zzCurrentPosL < zzMarkedPosL ;
           zzCurrentPosL += zzCharCount ) {
        zzCh = Character.codePointAt(zzBufferL, zzCurrentPosL, zzMarkedPosL);
        zzCharCount = Character.charCount(zzCh);
        switch (zzCh) {
        case '\u000B':  // fall through
        case '\u000C':  // fall through
        case '\u0085':  // fall through
        case '\u2028':  // fall through
        case '\u2029':
          yyline++;
          yycolumn = 0;
          zzR = false;
          break;
        case '\r':
          yyline++;
          yycolumn = 0;
          zzR = true;
          break;
        case '\n':
          if (zzR)
            zzR = false;
          else {
            yyline++;
            yycolumn = 0;
          }
          break;
        default:
          zzR = false;
          yycolumn += zzCharCount;
        }
      }

      if (zzR) {
        // peek one character ahead if it is
        // (if we have counted one line too much)
        boolean zzPeek;
        if (zzMarkedPosL < zzEndReadL)
          zzPeek = zzBufferL[zzMarkedPosL] == '\n';
        else if (zzAtEOF)
          zzPeek = false;
        else {
          boolean eof = zzRefill();
          zzEndReadL = zzEndRead;
          zzMarkedPosL = zzMarkedPos;
          zzBufferL = zzBuffer;
          if (eof)
            zzPeek = false;
          else
            zzPeek = zzBufferL[zzMarkedPosL] == '\n';
        }
        if (zzPeek) yyline--;
      }
      zzAction = -1;

      zzCurrentPosL = zzCurrentPos = zzStartRead = zzMarkedPosL;

      zzState = ZZ_LEXSTATE[zzLexicalState];

      // set up zzAction for empty match case:
      int zzAttributes = zzAttrL[zzState];
      if ( (zzAttributes & 1) == 1 ) {
        zzAction = zzState;
      }


      zzForAction: {
        while (true) {

          if (zzCurrentPosL < zzEndReadL) {
            zzInput = Character.codePointAt(zzBufferL, zzCurrentPosL, zzEndReadL);
            zzCurrentPosL += Character.charCount(zzInput);
          }
          else if (zzAtEOF) {
            zzInput = YYEOF;
            break zzForAction;
          }
          else {
            // store back cached positions
            zzCurrentPos  = zzCurrentPosL;
            zzMarkedPos   = zzMarkedPosL;
            boolean eof = zzRefill();
            // get translated positions and possibly new buffer
            zzCurrentPosL  = zzCurrentPos;
            zzMarkedPosL   = zzMarkedPos;
            zzBufferL      = zzBuffer;
            zzEndReadL     = zzEndRead;
            if (eof) {
              zzInput = YYEOF;
              break zzForAction;
            }
            else {
              zzInput = Character.codePointAt(zzBufferL, zzCurrentPosL, zzEndReadL);
              zzCurrentPosL += Character.charCount(zzInput);
            }
          }
          int zzNext = zzTransL[ zzRowMapL[zzState] + zzCMap(zzInput) ];
          if (zzNext == -1) break zzForAction;
          zzState = zzNext;

          zzAttributes = zzAttrL[zzState];
          if ( (zzAttributes & 1) == 1 ) {
            zzAction = zzState;
            zzMarkedPosL = zzCurrentPosL;
            if ( (zzAttributes & 8) == 8 ) break zzForAction;
          }

        }
      }

      // store back cached position
      zzMarkedPos = zzMarkedPosL;

      if (zzInput == YYEOF && zzStartRead == zzCurrentPos) {
        zzAtEOF = true;
          {   //System.out.println("*** Reaching end of file");
  return null;
 }
      }
      else {
        switch (zzAction < 0 ? zzAction : ZZ_ACTION[zzAction]) {
          case 1:
            { return new Token(Token.PUNCTUATION, yytext(), yyline, yycolumn);
            }
          // fall through
          case 22: break;
          case 2:
            { /* skip whitespace */
            }
          // fall through
          case 23: break;
          case 3:
            { return new Token(Token.APOSTROPHIZED, yytext(), yyline, yycolumn);
            }
          // fall through
          case 24: break;
          case 4:
            { return new Token(Token.HYPHENATED, yytext(), yyline, yycolumn);
            }
          // fall through
          case 25: break;
          case 5:
            { return new Token(Token.NUMBER, yytext(), yyline, yycolumn);
            }
          // fall through
          case 26: break;
          case 6:
            { return new Token(Token.WORD, yytext(), yyline, yycolumn);
            }
          // fall through
          case 27: break;
          case 7:
            { return new Token(Token.ERROR, yytext(), yyline, yycolumn);
            }
          // fall through
          case 28: break;
          case 8:
            { return new Token(Token.OPEN_DOC, yytext(), yyline, yycolumn);
            }
          // fall through
          case 29: break;
          case 9:
            { return new Token(Token.OPEN_TAG, yytext(), yyline, yycolumn);
            }
          // fall through
          case 30: break;
          case 10:
            { return new Token(Token.CLOSE_DOC, yytext(), yyline, yycolumn);
            }
          // fall through
          case 31: break;
          case 11:
            { return new Token(Token.CLOSE_TAG, yytext(), yyline, yycolumn);
            }
          // fall through
          case 32: break;
          case 12:
            { return new Token(Token.OPEN_DATE, yytext(), yyline, yycolumn);
            }
          // fall through
          case 33: break;
          case 13:
            { return new Token(Token.OPEN_TEXT, yytext(), yyline, yycolumn);
            }
          // fall through
          case 34: break;
          case 14:
            { return new Token(Token.CLOSE_DATE, yytext(), yyline, yycolumn);
            }
          // fall through
          case 35: break;
          case 15:
            { return new Token(Token.CLOSE_TEXT, yytext(), yyline, yycolumn);
            }
          // fall through
          case 36: break;
          case 16:
            { return new Token(Token.OPEN_DOCNO, yytext(), yyline, yycolumn);
            }
          // fall through
          case 37: break;
          case 17:
            { return new Token(Token.CLOSE_DOCNO, yytext(), yyline, yycolumn);
            }
          // fall through
          case 38: break;
          case 18:
            { return new Token(Token.OPEN_LENGTH, yytext(), yyline, yycolumn);
            }
          // fall through
          case 39: break;
          case 19:
            { return new Token(Token.CLOSE_LENGTH, yytext(), yyline, yycolumn);
            }
          // fall through
          case 40: break;
          case 20:
            { return new Token(Token.OPEN_HEADLINE, yytext(), yyline, yycolumn);
            }
          // fall through
          case 41: break;
          case 21:
            { return new Token(Token.CLOSE_HEADLINE, yytext(), yyline, yycolumn);
            }
          // fall through
          case 42: break;
          default:
            zzScanError(ZZ_NO_MATCH);
        }
      }
    }
  }


}
