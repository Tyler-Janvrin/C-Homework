/*
  Created by: Fei Song
  Extended by Tyler Janvrin
  File Name: cm.cup
*/
   
   
/* ----------------------Preliminary Declarations Section--------------------*/
   
import absyn.*;
   
/* Parser code to change the way the parser reports errors (include
   line and column number of the error). */
parser code {:
    
    /* Change the method report_error so it will display the line and
       column of where the error occurred in the input as well as the
       reason for the error which is passed into the method in the
       String 'message'. */
    public void report_error(String message, Object info) {
   
        /* Create a StringBuffer called 'm' with the string 'Error' in it. */
        StringBuffer m = new StringBuffer("Error");
   
        /* Check if the information passed to the method is the same
           type as the type java_cup.runtime.Symbol. */
        if (info instanceof java_cup.runtime.Symbol) {
            /* Declare a java_cup.runtime.Symbol object 's' with the
               information in the object info that is being typecasted
               as a java_cup.runtime.Symbol object. */
            java_cup.runtime.Symbol s = ((java_cup.runtime.Symbol) info);
   
            /* Check if the line number in the input is greater or
               equal to zero. */
            if (s.left >= 0) {                
                /* Add to the end of the StringBuffer error message
                   the line number of the error in the input. */
                m.append(" in line "+(s.left+1));   
                /* Check if the column number in the input is greater
                   or equal to zero. */
                if (s.right >= 0)                    
                    /* Add to the end of the StringBuffer error message
                       the column number of the error in the input. */
                    m.append(", column "+(s.right+1));
            }
        }
   
        /* Add to the end of the StringBuffer error message created in
           this method the message that was passed into this method. */
        m.append(" : "+message);
   
        /* Print the contents of the StringBuffer 'm', which contains
           an error message, out on a line. */
        System.err.println(m);
    }
   
    /* Change the method report_fatal_error so when it reports a fatal
       error it will display the line and column number of where the
       fatal error occurred in the input as well as the reason for the
       fatal error which is passed into the method in the object
       'message' and then exit.*/
    public void report_fatal_error(String message, Object info) {
        report_error(message, info);
        System.exit(1);
    }

    /* Assume true at the start, but set to false with parsing errors */
    public static boolean valid = true;

:};
   
   
/* ------------Declaration of Terminals and Non Terminals Section----------- */
   
terminal BOOL, ELSE, IF, INT, RETURN, VOID, WHILE, FALSE, TRUE;
terminal PLUS, MINUS, TIMES, DIV, LT, LE, GT, GE, EQ, NE, BITNOT, OR, AND, ASSIGN, SEMI, COMMA, LP, RP, LB, RB, LC, RC, UMINUS;
terminal String ID, NUM;
terminal ERROR;

// abstract classes:
// Var, Exp, Dec, VarDec
// misc classes
// DecList, VarDecList, ExpList

non terminal DecList dec_list;
non terminal Dec dec, fun_dec, fun_proto;
non terminal VarDec var_dec, param;
non terminal VarDecList params, param_list, local_decs;
non terminal NameTy type_spec;
non terminal Exp compound_stmt, statement, expression_stmt, selection_stmt, iteration_stmt, return_stmt;
non terminal Exp expression, bool_expression, simple_expression, arith_expression, factor;
non terminal Exp call;
non terminal ExpList args, arg_list;
non terminal ExpList statement_list;
non terminal VarExp var;

non terminal DecList program;

non terminal Dec program1;


/* Precedence declarations */
precedence left OR;
precedence left AND;
precedence right BITNOT;
precedence nonassoc EQ, NE;
precedence left PLUS, MINUS;
precedence left TIMES, DIV;
precedence right UMINUS;

/* ----------------------------Grammar Section-------------------- */
   
start with program;

/*
program1     ::= dec:s 
                 {: RESULT = s; :}
               ;
*/

// 1
program       ::= dec_list:dl
                  {: RESULT = dl; :}
                  ;

// 2
dec_list       ::= dec_list:dl dec:d
                  {: 
                     DecList t = dl;
                     while(t.tail != null){
                        t = t.tail;
                     }
                     t.tail = new DecList(d, null);
                     RESULT = dl;
                  :}
                  |
                  dec:d
                  {: 
                     RESULT = new DecList(d, null);
                  :}
                  ;

// 3
dec            ::= var_dec:v  {: RESULT = v; :}
                  | fun_dec:f  {: RESULT = f; :}
                  | fun_proto:f  {: RESULT = f; :}
                  ;

// 4           
var_dec        ::= type_spec:t ID:i SEMI 
                  {: RESULT = new SimpleDec(tleft, tright, t, i); :}
               |  type_spec:t ID:i LB NUM:n RB SEMI 
                  {: RESULT = new ArrayDec(tleft, tright, t, i, new IntExp(nleft, nright, n) ); :}
               ;

// 5
type_spec      ::= BOOL:b {: RESULT = new NameTy(bleft, bright, NameTy.BOOL); :}
               | INT:i {: RESULT = new NameTy(ileft, iright, NameTy.INT); :}
               | VOID:v {: RESULT = new NameTy(vleft, vright, NameTy.VOID); :}
               ;

// 6
fun_dec        ::= type_spec:t ID:i LP params:p RP compound_stmt:c
                  {: RESULT = new FunctionDec(ileft, iright, t, i, p, c); :}
               ;

// 7
fun_proto      ::= type_spec:t ID:i LP params:p RP SEMI
                  {: RESULT = new FunctionDec(ileft, iright, t, i, p, new NilExp(ileft, iright)); :}
               ;

// 8
params         ::= param_list:pl {: RESULT = pl; :}
               | VOID {: RESULT = new VarDecList(new NilVarDec(0, 0), null); :}
               ;

// 9 
param_list     ::= param_list:pl COMMA param:p
                  {:
                     VarDecList t = pl;
                     while(t.tail != null){
                        t = t.tail;
                     }
                     t.tail = new VarDecList(p, null);
                     RESULT = pl;
                  :}
               |
               param:p {:
                  RESULT = new VarDecList(p, null);
               :}
               ;

// 10
param          ::= type_spec:t ID:i 
                  {: RESULT = new SimpleDec(tleft, tright, t, i); :}
               | type_spec:t ID:i LB RB
               /* Not 100% sure that I'm using the right declaration here, but there's no int for size. */
                  {: RESULT = new ArrayDec(tleft, tright, t, i, new IntExp(tleft, tright, "0")); :}
               ;

// 11
compound_stmt  ::= LC local_decs:l statement_list:s RC
                  {: RESULT = new CompoundExp(lleft, lright, l, s); :}
               ;

// 12
local_decs     ::= local_decs:l var_dec:v
                  {:
                     VarDecList t = l;
                     while(t.tail != null){
                        t = t.tail;
                     }
                     t.tail = new VarDecList(v, null);
                     RESULT = l;
                  :}
               |
                  {: RESULT = new VarDecList(new NilVarDec(0,0), null); :}
               ;

// 13
statement_list ::= statement_list:sl statement:s
                  {:
                     ExpList t = sl;
                     while (t.tail != null){
                        t = t.tail;
                     }
                     t.tail = new ExpList(s, null);
                     RESULT = sl;
                  :}
               | 
                  {: RESULT = new ExpList(new NilExp(0,0), null); :}
               ;

// 14
statement      ::= expression_stmt:e 
                  {: RESULT = e; :}
               |
                  compound_stmt:c
                  {: RESULT = c; :}
               |
                  selection_stmt:s
                  {: RESULT = s; :}
               |
                  iteration_stmt:i
                  {: RESULT = i; :}
               |
                  return_stmt:r
                  {: RESULT = r; :}
               ;

// 15
expression_stmt   ::= 
                  expression:e SEMI
                     {: RESULT = e; :}
                  |
                  SEMI:s
                     {: RESULT = new NilExp(sleft, sright); :}
                  |
                  error SEMI:s
                     {: 
                        parser.report_error("invalid expression", s);
                        RESULT = new NilExp(sleft, sright);
                     :}
                  ;

// 16
selection_stmt ::= 
                  IF LP expression:e RP statement:s
                     {: RESULT = new IfExp(eleft, eright, e, s, new NilExp(sleft, sright)); :}
                  |
                  IF LP expression:e RP statement:s1 ELSE statement:s2
                     {: RESULT = new IfExp(eleft, eright, e, s1, s2); :}
                  ;

// 17
iteration_stmt ::=
                  WHILE:w LP expression:e RP statement:s1
                  {: RESULT = new WhileExp(wleft, wright, e, s1); :}
               ;

// 18
return_stmt ::=
               RETURN:r expression:e SEMI 
                  {: RESULT = new ReturnExp(rleft, rright, e); :}
               |
               RETURN:r SEMI
                  {: RESULT = new ReturnExp(rleft, rright, new NilExp(rleft, rright)); :}
               ;

// 19
expression ::= 
               var:v ASSIGN expression:e
                  {: RESULT = new AssignExp(vleft, vright, v, e); :}
               |
               bool_expression:b
                  {: RESULT = b; :}
               ;

// 20
var         ::=
               ID:i {: RESULT = new VarExp(ileft, iright, new SimpleVar(ileft, iright, i) ); :}
            |
               ID:i LB expression:e RB
               {: RESULT = new VarExp(ileft, iright, new IndexVar(ileft, iright, i, e)); :}
            ;

// here's where it gets tricky... I'm not 100% sure how to do this

// 21 // make sure you set priority correctly
bool_expression   ::=
                     bool_expression:b1 OR bool_expression:b2
                     {: RESULT = new OpExp(b1left, b1right, b1, OpExp.OR, b2); :}
                  |
                     bool_expression:b1 AND bool_expression:b2
                     {: RESULT = new OpExp(b1left, b1right, b1, OpExp.AND, b2); :}
                  |
                     BITNOT bool_expression:b
                     {: RESULT = new OpExp(bleft, bright, new NilExp(bleft, bright), OpExp.BITNOT, b); :}
                  |
                     simple_expression:s
                     {: RESULT = s; :}
                  ;

// 22
simple_expression ::= 
                     arith_expression:a1 LE arith_expression:a2
                        {: RESULT = new OpExp(a1left, a1right, a1, OpExp.LE, a2); :}
                     |
                     arith_expression:a1 LT arith_expression:a2
                        {: RESULT = new OpExp(a1left, a1right, a1, OpExp.LT, a2); :}
                     |
                     arith_expression:a1 GE arith_expression:a2
                        {: RESULT = new OpExp(a1left, a1right, a1, OpExp.GE, a2); :}
                     |
                     arith_expression:a1 GT arith_expression:a2
                        {: RESULT = new OpExp(a1left, a1right, a1, OpExp.GT, a2); :}
                     |
                     arith_expression:a1 EQ arith_expression:a2
                        {: RESULT = new OpExp(a1left, a1right, a1, OpExp.EQ, a2); :}
                     |
                     arith_expression:a1 NE arith_expression:a2
                        {: RESULT = new OpExp(a1left, a1right, a1, OpExp.NE, a2); :}
                     |
                     arith_expression:a
                        {: RESULT = a; :}
                     ;

// 23
arith_expression  ::=
                     arith_expression:a1 PLUS arith_expression:a2
                        {: RESULT = new OpExp(a1left, a1right, a1, OpExp.PLUS, a2); :}
                     |
                     arith_expression:a1 MINUS arith_expression:a2
                        {: RESULT = new OpExp(a1left, a1right, a1, OpExp.MINUS, a2); :}
                     |
                     arith_expression:a1 TIMES arith_expression:a2
                        {: RESULT = new OpExp(a1left, a1right, a1, OpExp.TIMES, a2); :}
                     |
                     arith_expression:a1 DIV arith_expression:a2
                        {: RESULT = new OpExp(a1left, a1right, a1, OpExp.DIV, a2); :}
                     |
                     factor:f
                        {: RESULT = f; :}
                     ;

// 24
factor            ::=
                     MINUS:m factor:a1 
                        {: RESULT = new OpExp(mleft, mright, new NilExp(mleft, mright), OpExp.UMINUS, a1); :} %prec UMINUS
                     |
                     LP arith_expression:a RP
                        {: RESULT = a; :}
                     |
                     LP error:e RP
                     {:   
                        parser.report_error("Invalid arithmetic expression within parentheses", e); 
                        RESULT = new NilExp(eleft, eright); 
                     :}
                     |
                     var:v
                        {: RESULT = v; :}
                     |
                     call:c
                        {: RESULT = c; :}
                     |
                        NUM:n
                        {: RESULT = new IntExp(nleft, nright, n); :}
                     |
                        TRUE:t
                        {: RESULT = new BoolExp(tleft, tright, true); :}
                     |
                        FALSE:f
                        {: RESULT = new BoolExp(fleft, fright, false); :}
                     ;

// 25
call           ::=
                  ID:i LP args:a RP
                  {: RESULT = new CallExp(ileft, iright, i, a); :}
               ;

// 26
args           ::=
                  arg_list:a
                  {: RESULT = a; :}
               |
                  {: RESULT = new ExpList(new NilExp(0,0), null); :}
               ;

// 27
arg_list       ::=
                  arg_list:a COMMA expression:e 
                     {:
                        ExpList t = a;
                        while(t.tail != null){
                           t = t.tail;
                        }
                        t.tail = new ExpList(e, null);
                        RESULT = a;
                     :}
               |
                  expression:e
                  {: RESULT = new ExpList(e, null); :}
               ;



